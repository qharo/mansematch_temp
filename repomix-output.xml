This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
app/
  templates/
    _footer.html
    _header.html
    auth.html
    base.html
    big_five_report.html
    dashboard.html
    index.html
    old_quiz_page.html
    quiz_page copy copy.html
    quiz_page copy.html
    quiz_page.html
    report_page.html
  main.py
  quizzes_data.json
docker-compose.yml
Dockerfile
requirements.txt
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/templates/_footer.html">
<!-- app/templates/_footer.html -->
<footer class="bg-gray-800 text-center py-8 mt-auto">
    <p class="text-gray-400">
        Â© {{ request.state.current_year }} mansematch. All rights reserved. {#
        Changed SaaS name #}
    </p>
</footer>
</file>

<file path="app/templates/_header.html">
<!-- app/templates/_header.html -->
<header class="bg-white shadow-md sticky top-0 z-50">
    <nav class="container mx-auto px-6 py-4 flex justify-between items-center">
        <a
            href="/"
            class="text-2xl font-bold text-blue-600 hover:text-blue-700 transition-colors"
            >mansematch</a
        >
        <div>
            {% set display_user = user if user is defined else
            request.state.user %} {% if display_user %}
            <!-- Profile Dropdown -->
            <div
                x-data="{ open: false }"
                class="relative"
                @keydown.escape.window="open = false"
                @click.outside="open = false"
            >
                <button
                    @click="open = !open"
                    class="rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    aria-label="User menu"
                    aria-haspopup="true"
                    :aria-expanded="open.toString()"
                >
                    <img
                        src="https://api.dicebear.com/8.x/bottts-neutral/svg?seed={{ display_user.email | urlencode if display_user.email else 'default-user' }}"
                        alt="{{ display_user.email if display_user.email else 'User' }} avatar"
                        class="h-10 w-10 rounded-full"
                    />
                </button>

                <div
                    x-show="open"
                    x-transition:enter="transition ease-out duration-100"
                    x-transition:enter-start="transform opacity-0 scale-95"
                    x-transition:enter-end="transform opacity-100 scale-100"
                    x-transition:leave="transition ease-in duration-75"
                    x-transition:leave-start="transform opacity-100 scale-100"
                    x-transition:leave-end="transform opacity-0 scale-95"
                    class="absolute right-0 mt-2 w-56 origin-top-right bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none z-50"
                    role="menu"
                    aria-orientation="vertical"
                    aria-labelledby="user-menu-button"
                    tabindex="-1"
                    x-cloak
                >
                    <div class="py-1" role="none">
                        <div class="px-4 py-3">
                            {# Removed "Signed in as" text #}
                            <p
                                class="text-sm font-medium text-gray-800 truncate"
                                role="none"
                            >
                                {{ display_user.email }}
                            </p>
                        </div>
                        <hr class="border-gray-200" />
                        <a
                            href="#"
                            {#
                            Replace
                            with
                            actual
                            settings
                            page
                            URL
                            later
                            #}
                            class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                            role="menuitem"
                            tabindex="-1"
                            id="user-menu-item-0"
                            @click="open = false"
                        >
                            Settings
                        </a>
                        <button
                            hx-post="/logout"
                            hx-target="body"
                            hx-swap="outerHTML"
                            class="w-full text-left block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                            role="menuitem"
                            tabindex="-1"
                            id="user-menu-item-1"
                            @click="open = false"
                        >
                            Sign Out
                        </button>
                    </div>
                </div>
            </div>
            {% else %}
            <a
                href="/auth"
                class="bg-blue-500 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-md transition-colors"
            >
                Sign In
            </a>
            {% endif %}
        </div>
    </nav>
</header>
</file>

<file path="app/templates/auth.html">
<file path="app/templates/auth.html">
    <!-- app/templates/auth.html -->
    {% extends "base.html" %} {% block content %}

    <script>
        function handleAuthResponse(event) {
            const xhr = event.detail.xhr;
            const successful = event.detail.successful; // true for 2xx or 3xx status codes
            const redirectUrl = xhr.getResponseHeader("HX-Redirect");

            // Priority 1: Handle redirection if HX-Redirect header is present
            if (redirectUrl) {
                window.location.href = redirectUrl;
                return; // Stop further processing in this function
            }

            // Priority 2: Handle actual errors (if no redirect and request was not successful)
            // This block will only be reached if there was no HX-Redirect.
            if (!successful) {
                const messageDiv = document.getElementById("auth-message");
                if (messageDiv) {
                    // HTMX will have already attempted to swap the server's error response
                    // into #auth-message due to hx-target and hx-swap on the form.
                    // This check is for the case where the server sends an error status
                    // but with an empty response body.
                    const currentContent = messageDiv.innerHTML.trim();
                    if (currentContent === "") {
                        // Display a generic fallback error message.
                        messageDiv.innerHTML =
                            '<p class="text-red-600">An unexpected error occurred. Please try again.</p>';
                    }
                    // If currentContent is not empty, it means HTMX successfully swapped in
                    // an error message from the server (e.g., "Invalid credentials"),
                    // so we don't overwrite it.
                }
            }
            // If there was no HX-Redirect AND the request was successful (e.g., a 200 OK
            // with content meant for swapping but not a redirect scenario), HTMX handles
            // the swap based on hx-swap attributes, and this function doesn't need
            // to do anything further for that case.
        }
    </script>

    <div class="container mx-auto px-4 py-8 mt-6">
        <div
            class="max-w-lg mx-auto bg-white p-8 rounded-xl shadow-2xl"
            x-data="{ currentTab: 'signin' }"
            x-cloak
        >
            <div class="flex border-b mb-8">
                <button
                    @click="currentTab = 'signin'"
                    :class="{ 'border-blue-600 text-blue-600 font-semibold': currentTab === 'signin', 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300': currentTab !== 'signin' }"
                    class="w-1/2 py-3 text-center text-lg border-b-2 focus:outline-none transition-all"
                >
                    Sign In
                </button>
                <button
                    @click="currentTab = 'signup'"
                    :class="{ 'border-blue-600 text-blue-600 font-semibold': currentTab === 'signup', 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300': currentTab !== 'signup' }"
                    class="w-1/2 py-3 text-center text-lg border-b-2 focus:outline-none transition-all"
                >
                    Sign Up
                </button>
            </div>

            <!-- Sign In Form -->
            <div x-show="currentTab === 'signin'" x-transition>
                <h2 class="text-3xl font-bold text-gray-800 mb-8 text-center">
                    Sign In to Your Account
                </h2>
                <form
                    hx-post="/login"
                    hx-target="#auth-message"
                    hx-swap="innerHTML"
                    hx-on::after-request="handleAuthResponse(event)"
                >
                    <div
                        id="auth-message"
                        class="mb-4 text-center min-h-[24px]"
                    ></div>
                    <div class="mb-6">
                        <label
                            for="email_signin"
                            class="block text-sm font-medium text-gray-700 mb-1"
                            >Email Address</label
                        >
                        <input
                            type="email"
                            name="email"
                            id="email_signin"
                            required
                            class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                            value="user1@example.com"
                        />
                    </div>
                    <div class="mb-8">
                        <label
                            for="password_signin"
                            class="block text-sm font-medium text-gray-700 mb-1"
                            >Password</label
                        >
                        <input
                            type="password"
                            name="password"
                            id="password_signin"
                            required
                            class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                            value="password123"
                        />
                    </div>
                    <button
                        type="submit"
                        class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-md focus:outline-none focus:shadow-outline transition-colors text-lg"
                    >
                        Sign In
                    </button>
                </form>
            </div>

            <!-- Sign Up Form (Placeholder) -->
            <div x-show="currentTab === 'signup'" x-transition>
                <h2 class="text-3xl font-bold text-gray-800 mb-8 text-center">
                    Create an Account
                </h2>
                <p class="text-gray-600 text-center mb-6">
                    Sign up functionality is not yet implemented in this POC.
                </p>
                <form @submit.prevent="alert('Sign up is currently disabled.')">
                    <div class="mb-6">
                        <label
                            for="email_signup"
                            class="block text-sm font-medium text-gray-700 mb-1"
                            >Email Address</label
                        >
                        <input
                            type="email"
                            name="email_signup"
                            id="email_signup"
                            class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                            placeholder="your.email@example.com"
                            disabled
                        />
                    </div>
                    <div class="mb-8">
                        <label
                            for="password_signup"
                            class="block text-sm font-medium text-gray-700 mb-1"
                            >Password</label
                        >
                        <input
                            type="password"
                            name="password_signup"
                            id="password_signup"
                            class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                            placeholder="********"
                            disabled
                        />
                    </div>
                    <button
                        type="submit"
                        class="w-full bg-green-500 hover:bg-green-700 text-white font-bold py-3 px-4 rounded-md focus:outline-none focus:shadow-outline opacity-50 cursor-not-allowed transition-colors text-lg"
                    >
                        Sign Up (Disabled)
                    </button>
                </form>
            </div>
        </div>
    </div>
    {% endblock %}
</file>
</file>

<file path="app/templates/base.html">
<!-- app/templates/base.html -->
<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>{{ title | default("mansematch") }}</title>
        <script src="https://cdn.tailwindcss.com"></script>
        <script
            src="https://unpkg.com/htmx.org@1.9.10"
            integrity="sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC"
            crossorigin="anonymous"
        ></script>
        <script
            defer
            src="https://cdn.jsdelivr.net/npm/alpinejs@3.13.8/dist/cdn.min.js"
        ></script>
        <style>
            body {
                font-family: "Inter", sans-serif;
            }
            [x-cloak] {
                display: none !important;
            }
        </style>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link
            href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
            rel="stylesheet"
        />
    </head>
    <body
        class="bg-gray-100 text-gray-800 flex flex-col min-h-screen"
        hx-boost="true"
    >
        {% include "_header.html" %}

        <main class="flex-grow">{% block content %}{% endblock %}</main>

        {% include "_footer.html" %} {% block scripts %}{% endblock %}
    </body>
</html>
</file>

<file path="app/templates/big_five_report.html">
<!-- app/templates/big_five_report.html -->
{% extends "base.html" %} {% block content %}
<div class="container mx-auto px-4 py-8 mt-6">
    <!-- Back to Dashboard Arrow Button -->
    <div class="mb-4">
        <a
            href="{{ url_for('dashboard_page_route') }}"
            class="inline-flex items-center p-2 text-black hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 rounded-md transition-colors"
            title="Back to Dashboard"
        >
            <svg
                class="w-6 h-6"
                fill="currentColor"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
            >
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M10 19l-7-7m0 0l7-7m-7 7h18"
                ></path>
            </svg>
        </a>
    </div>

    <div class="bg-white p-6 md:p-10 rounded-xl shadow-2xl">
        <div class="mb-8 pb-6 border-b border-gray-200">
            <h1 class="text-3xl md:text-4xl font-bold text-gray-800 mb-2">
                {{ report.quiz_title | e }}
            </h1>
            <p class="text-md text-gray-500">
                Completed on: {{ report.date_taken.strftime('%B %d, %Y at
                %H:%M') if report.date_taken else 'N/A' }}
            </p>
        </div>

        <div class="mb-10">
            <h2 class="text-2xl font-semibold text-gray-700 mb-3">
                About the Big Five
            </h2>
            <p class="text-gray-600 leading-relaxed">
                {{ report.quiz_description | e if report.quiz_description else
                "The Big Five model is a widely accepted framework for
                understanding personality, categorizing traits into five broad
                dimensions: Openness, Conscientiousness, Extraversion,
                Agreeableness, and Neuroticism." }}
            </p>
        </div>

        <!-- Radar Chart Section -->
        <section class="mb-12 p-6 bg-gray-50 rounded-lg shadow-inner">
            <!-- Removed: <h2 class="text-2xl font-semibold text-gray-700 mb-6 text-center">Your Personality Profile</h2> -->
            <div class="max-w-xl mx-auto">
                <canvas id="bfiRadarChart"></canvas>
            </div>
        </section>

        <!-- Table with Trait, Score, and Interpretation Section -->
        <section class="mb-10">
            <h2 class="text-2xl font-semibold text-gray-700 mb-6">
                Detailed Trait Analysis
            </h2>
            <div class="overflow-x-auto">
                <table
                    class="min-w-full bg-white border border-gray-200 rounded-lg shadow"
                >
                    <thead class="bg-gray-100">
                        <tr>
                            <th
                                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                            >
                                Trait
                            </th>
                            <th
                                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                            >
                                Your Score (1-5)
                            </th>
                            <th
                                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                            >
                                Interpretation Level
                            </th>
                            <th
                                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                            >
                                Description
                            </th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200">
                        {% for item in bfi_table_data %}
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="text-sm font-medium text-gray-900">
                                    {{ item.trait | e }}
                                </div>
                                <div class="text-xs text-gray-500">
                                    {{ item.general_trait_description | e }}
                                </div>
                            </td>
                            <td
                                class="px-6 py-4 whitespace-nowrap text-sm text-gray-700"
                            >
                                {{ "%.2f" | format(item.score) if item.score !=
                                'N/A' else 'N/A' }}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span
                                    class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full {% if item.interpretation_level == 'Low' %} bg-blue-100 text-blue-800 {% elif item.interpretation_level == 'Average' %} bg-yellow-100 text-yellow-800 {% elif item.interpretation_level == 'High' %} bg-green-100 text-green-800 {% else %} bg-gray-100 text-gray-800 {% endif %}"
                                >
                                    {{ item.interpretation_level | e }}
                                </span>
                            </td>
                            <td class="px-6 py-4 text-sm text-gray-600">
                                {{ item.interpretation_description | e }}
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </section>
    </div>
</div>
{% endblock %} {% block scripts %} {{ super() }}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const ctx = document.getElementById('bfiRadarChart');

        if (!ctx) {
            console.error("Radar chart canvas element 'bfiRadarChart' not found.");
            return;
        }

        let radarLabelsFromJinja;
        let radarDataFromJinja;

        try {
            radarLabelsFromJinja = {{ radar_chart_labels | json_dumps | safe }};
            radarDataFromJinja = {{ radar_chart_data | json_dumps | safe }};
        } catch (e) {
            console.error("Error parsing Jinja chart data variables:", e);
            const chartContainer = ctx.parentElement;
            if (chartContainer) {
                chartContainer.innerHTML = '<p class="text-center text-red-500">Error loading chart data. Check console.</p>';
            }
            return;
        }

        // console.log("Raw radarLabels from Jinja:", radarLabelsFromJinja); // Keep for debugging if needed
        // console.log("Raw radarData from Jinja:", radarDataFromJinja); // Keep for debugging if needed

        const isValidArray = (arr) => Array.isArray(arr) && arr.length > 0;

        if (isValidArray(radarLabelsFromJinja) &&
            isValidArray(radarDataFromJinja) &&
            radarLabelsFromJinja.length === radarDataFromJinja.length) {

            try {
                new Chart(ctx, {
                    type: 'radar',
                    data: {
                        labels: radarLabelsFromJinja,
                        datasets: [{
                            label: 'Your Score', // This label is used by tooltips, but the legend itself is hidden
                            data: radarDataFromJinja,
                            fill: true,
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            borderColor: 'rgb(54, 162, 235)',
                            pointBackgroundColor: 'rgb(54, 162, 235)',
                            pointBorderColor: '#fff',
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: 'rgb(54, 162, 235)'
                        }]
                    },
                    options: {
                        elements: {
                            line: {
                                borderWidth: 3
                            }
                        },
                        scales: {
                            r: {
                                angleLines: {
                                    display: true
                                },
                                suggestedMin: 0,
                                suggestedMax: 5,
                                pointLabels: {
                                    font: {
                                        size: 13
                                    }
                                },
                                ticks: {
                                    stepSize: 1
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                display: false // MODIFICATION: Hide the legend
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        let label = context.dataset.label || ''; // Tooltip can still use the dataset label
                                        if (label) {
                                            label += ': ';
                                        }
                                        if (context.parsed.r !== null) {
                                            label += context.parsed.r.toFixed(2);
                                        }
                                        return label;
                                    }
                                }
                            }
                        }
                    }
                });
                // console.log("Chart initialized successfully."); // Keep for debugging if needed
            } catch (chartError) {
                console.error("Error initializing Chart.js:", chartError);
                const chartContainer = ctx.parentElement;
                if (chartContainer) {
                    chartContainer.innerHTML = '<p class="text-center text-red-500">Could not display chart. See console for details.</p>';
                }
            }
        } else {
            console.warn("Radar chart data is missing, empty, or mismatched. Chart will not be rendered.", {
                labels: radarLabelsFromJinja,
                data: radarDataFromJinja,
                labelsValid: isValidArray(radarLabelsFromJinja),
                dataValid: isValidArray(radarDataFromJinja),
                lengthsMatch: radarLabelsFromJinja && radarDataFromJinja ? radarLabelsFromJinja.length === radarDataFromJinja.length : false
            });
            const chartContainer = ctx.parentElement;
            if (chartContainer) {
                let messageP = chartContainer.querySelector('.chart-message');
                if (!messageP) {
                    messageP = document.createElement('p');
                    messageP.className = 'text-center text-gray-500 chart-message';
                    chartContainer.appendChild(messageP);
                }
                messageP.textContent = 'Personality profile chart data is not available or is incomplete.';
            }
        }
    });
</script>
{% endblock %}
</file>

<file path="app/templates/dashboard.html">
<!-- app/templates/dashboard.html -->
{% extends "base.html" %} {% block content %}
<div class="container mx-auto px-4 py-8 mt-6">
    <!-- Quizzes Section -->
    <section class="mb-16">
        <h2 class="text-3xl font-semibold text-gray-700 mb-8 border-b pb-3">
            Available Quizzes
        </h2>
        {% if quizzes %}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {% for quiz in quizzes %}
            <div
                class="bg-white p-6 rounded-xl shadow-lg hover:shadow-2xl transition-shadow duration-300 flex flex-col justify-between"
            >
                <div>
                    <h3 class="text-2xl font-bold text-blue-600 mb-3">
                        {{ quiz.title }}
                    </h3>
                    <p class="text-gray-600 mb-6 text-sm">
                        {{ quiz.description }}
                    </p>
                </div>
                <a
                    href="{{ url_for('quiz_page_route', quiz_id=quiz.id) }}"
                    class="block text-center mt-auto bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-5 rounded-md transition-colors w-full"
                >
                    Take Quiz
                </a>
            </div>
            {% endfor %}
        </div>
        {% else %}
        <p class="text-gray-600 italic">
            No quizzes available at the moment. Check back soon!
        </p>
        {% endif %}
    </section>

    <!-- Reports Section -->
    <section>
        <h2 class="text-3xl font-semibold text-gray-700 mb-8 border-b pb-3">
            Your Quiz Reports
        </h2>
        {% if reports %}
        <div class="bg-white p-6 rounded-xl shadow-lg">
            <ul class="divide-y divide-gray-200">
                {% for report in reports %}
                <li class="py-5">
                    <div
                        class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3"
                    >
                        <div>
                            <h4 class="text-xl font-medium text-gray-800">
                                {{ report.quiz_title }}
                            </h4>
                            <p class="text-sm text-gray-500">
                                Taken on: {{
                                report.date_taken.strftime('%Y-%m-%d %H:%M') if
                                report.date_taken else 'N/A' }}
                            </p>
                        </div>
                        <div class="flex items-center gap-4 mt-2 sm:mt-0">
                            <div class="text-right">
                                {% if report.report_type == 'bfi-10' and
                                report.score is mapping %}
                                <span
                                    class="text-sm font-semibold text-gray-700 block"
                                    >Personality Profile</span
                                >
                                <span class="text-xs text-gray-500"
                                    >(Detailed Report)</span
                                >
                                {% elif report.score is string %} {# Standard
                                percentage score #}
                                <span
                                    class="text-2xl font-semibold {% if report.score.replace('%','') | int >= 80 %}text-green-600 {% elif report.score.replace('%','') | int >= 50 %}text-yellow-600 {% else %}text-red-600{% endif %}"
                                >
                                    {{ report.score }}
                                </span>
                                {% else %}
                                <span
                                    class="text-lg font-semibold text-gray-500"
                                    >N/A</span
                                >
                                {% endif %}
                            </div>
                            <a
                                href="{{ url_for('report_page_route', report_id=report.id) }}"
                                class="text-sm bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-md transition-colors"
                            >
                                View Report
                            </a>
                        </div>
                    </div>
                </li>
                {% endfor %}
            </ul>
        </div>
        {% else %}
        <p class="text-gray-600 italic">
            You haven't completed any quizzes yet. Start a quiz to see your
            reports!
        </p>
        {% endif %}
        <!-- Removed report-details-area as full page reports are now used -->
    </section>
</div>
{% endblock %}
</file>

<file path="app/templates/index.html">
<!-- app/templates/index.html -->
{% extends "base.html" %} {% block content %}

<!-- Banner Section -->
<section
    class="bg-gradient-to-r from-blue-600 to-indigo-700 text-white py-48 shadow-xl"
>
    {# Increased py-32 (from previous) to py-48 for more height. No top margin
    needed. #}
    <div class="container mx-auto px-6 text-center">
        <h1 class="text-5xl font-bold mb-6">
            Welcome to Your SaaS Quiz Platform!
        </h1>
        <p class="text-xl text-blue-100 mb-10">
            The simplest way to create, take, and manage quizzes.
        </p>
        <a
            href="#email-form-section"
            {#
            Point
            to
            the
            section
            wrapper
            #}
            class="bg-white text-indigo-600 font-bold py-3 px-8 rounded-full hover:bg-gray-100 transition duration-300 transform hover:scale-105 text-lg"
        >
            Get Started
        </a>
    </div>
</section>

<!-- Email Submission Form Section -->
<section id="email-form-section" class="py-16">
    {# This section has its own vertical padding. The body background
    (bg-gray-100) will be visible between the banner and this section. #}
    <div class="container mx-auto px-6">
        <div
            class="max-w-2xl mx-auto bg-white p-8 md:p-12 rounded-lg shadow-xl text-center"
        >
            <h2 class="text-3xl font-semibold text-gray-800 mb-6">
                Stay Updated!
            </h2>
            <p class="text-gray-600 mb-8">
                Subscribe to our newsletter for the latest features and updates.
            </p>
            <form
                hx-post="/subscribe"
                hx-target="#subscribe-response"
                hx-swap="innerHTML"
                class="w-full"
            >
                <div class="flex flex-col sm:flex-row items-center gap-4">
                    <input
                        class="appearance-none bg-gray-50 border border-gray-300 rounded-md w-full text-gray-700 py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-blue-500"
                        type="email"
                        name="email"
                        placeholder="your.email@example.com"
                        aria-label="Email address"
                        required
                    />
                    <button
                        class="flex-shrink-0 bg-blue-500 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-md transition-colors w-full sm:w-auto"
                        type="submit"
                    >
                        Subscribe
                    </button>
                </div>
                <div id="subscribe-response" class="mt-4 text-sm min-h-[20px]">
                    <!-- HTMX response will be injected here -->
                </div>
            </form>
        </div>
    </div>
</section>
{% endblock %}
</file>

<file path="app/templates/old_quiz_page.html">
{% extends "base.html" %} {% block content %}
<script id="quiz-data-json" type="application/json">
    {{ quiz | tojson | safe }}
</script>

<div class="container mx-auto px-4 py-8 mt-6" id="quiz-container">
    <!-- Loading/Error Message Area -->
    <div id="quiz-message-area" class="text-center py-10">
        <p class="text-xl text-gray-700">Loading quiz...</p>
    </div>

    <!-- Quiz Title (populated by JS) -->
    <h1
        id="quiz-title"
        class="text-3xl font-bold text-gray-800 mb-2"
        style="display: none"
    ></h1>

    <!-- Question Progress (populated by JS) -->
    <p
        id="question-progress"
        class="text-sm text-gray-600 mb-6"
        style="display: none"
    ></p>

    <!-- Form will contain all questions, and we'll show/hide them -->
    <form
        id="quiz-form"
        method="POST"
        action="{{ url_for('submit_quiz_route', quiz_id=quiz.id) }}"
        style="display: none"
    >
        <div id="questions-wrapper">
            <!-- Questions will be injected here by JavaScript -->
        </div>

        <!-- Hidden input for all answers -->
        <input type="hidden" name="answers" id="all-answers-json" />

        <!-- Navigation -->
        <div
            id="quiz-navigation"
            class="flex justify-between items-center mt-8"
            style="display: none"
        >
            <button
                type="button"
                id="prev-question-btn"
                onclick="prevQuestion()"
                class="bg-gray-500 hover:bg-gray-600 text-white font-semibold py-2 px-5 rounded-md transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
                Previous
            </button>
            <button
                type="button"
                id="next-question-btn"
                onclick="nextQuestion()"
                class="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-5 rounded-md transition-colors"
            >
                Next
            </button>
            <button
                type="submit"
                id="submit-quiz-btn"
                class="bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-5 rounded-md transition-colors"
                style="display: none"
            >
                Submit Quiz
            </button>
        </div>
    </form>

    <!-- Submitted Message Area (initially hidden) -->
    <div
        id="submitted-message-area"
        class="text-center py-10"
        style="display: none"
    >
        <p class="text-2xl text-green-600 font-semibold">
            Quiz submitted successfully!
        </p>
        <p class="text-gray-600 mt-2">
            You will be redirected to the dashboard shortly.
        </p>
    </div>
</div>

<script>
    let quizData = null;
    let questions = [];
    let currentQuestionIndex = 0;
    let userAnswers = {};

    const quizMessageArea = document.getElementById("quiz-message-area");
    const quizTitleEl = document.getElementById("quiz-title");
    const questionProgressEl = document.getElementById("question-progress");
    const quizFormEl = document.getElementById("quiz-form");
    const questionsWrapperEl = document.getElementById("questions-wrapper");
    const allAnswersJsonInput = document.getElementById("all-answers-json");
    const prevBtn = document.getElementById("prev-question-btn");
    const nextBtn = document.getElementById("next-question-btn");
    const submitBtn = document.getElementById("submit-quiz-btn");
    const quizNavigationEl = document.getElementById("quiz-navigation");

    function escapeHtml(unsafe) {
        if (unsafe === null || typeof unsafe === "undefined") return "";
        return String(unsafe)
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#39;");
    }

    function escapeHtmlAttr(unsafe) {
        // Separate function for attribute values to avoid breaking JS syntax
        if (unsafe === null || typeof unsafe === "undefined") return "";
        return String(unsafe).replace(/"/g, "&quot;").replace(/'/g, "&#39;");
    }

    function initializeQuiz() {
        const quizDataScript = document.getElementById("quiz-data-json");

        if (!quizDataScript || !quizDataScript.textContent) {
            quizMessageArea.innerHTML =
                '<p class="text-xl text-red-600">Error: Quiz data script element missing.</p>';
            return;
        }

        try {
            quizData = JSON.parse(quizDataScript.textContent);
        } catch (e) {
            console.error(
                "Failed to parse quiz data:",
                e,
                "Raw content:",
                quizDataScript.textContent,
            );
            quizMessageArea.innerHTML =
                '<p class="text-xl text-red-600">Error: Could not load quiz data (JSON parse failed).</p>';
            return;
        }

        if (!quizData || !quizData.id || !quizData.title) {
            quizMessageArea.innerHTML =
                '<p class="text-xl text-red-600">Error: Invalid quiz data structure.</p>';
            return;
        }

        questions = quizData.questions || [];
        quizTitleEl.textContent = quizData.title;

        if (questions.length === 0) {
            quizTitleEl.style.display = "block";
            quizMessageArea.innerHTML = `
                <p class="text-xl text-gray-700">This quiz currently has no questions.</p>
                <a href="{{ url_for('dashboard_page_route') }}" class="mt-4 inline-block bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-md transition-colors">
                    Back to Dashboard
                </a>`;
            return;
        }

        userAnswers = {};
        questions.forEach((q) => {
            if (q && q.id) {
                userAnswers[q.id] = null;
            }
        });

        renderQuestions();
        showQuestion(currentQuestionIndex);
        updateNavigation();

        quizMessageArea.style.display = "none";
        quizTitleEl.style.display = "block";
        questionProgressEl.style.display = "block";
        quizFormEl.style.display = "block";
        quizNavigationEl.style.display = "flex";
    }

    function renderQuestions() {
        questionsWrapperEl.innerHTML = "";
        questions.forEach((question) => {
            if (!question || !question.id) {
                console.warn(
                    "Skipping invalid question during render (missing id):",
                    question,
                );
                return;
            }
            const questionDiv = document.createElement("div");
            questionDiv.id = `question-${question.id}`;
            questionDiv.className =
                "bg-white p-6 rounded-xl shadow-lg mb-8 question-item";
            questionDiv.style.display = "none";

            let optionsHtml = "";
            const qidStr = String(question.id);

            if (
                question.type === "multiple-choice" &&
                Array.isArray(question.options_map)
            ) {
                optionsHtml = question.options_map
                    .map((opt) => {
                        const escapedOptionDisplay = escapeHtml(opt.text);
                        const escapedOptionValue = escapeHtmlAttr(
                            String(opt.value),
                        );
                        return `
                    <div>
                        <label class="flex items-center p-3 rounded-md hover:bg-gray-100 cursor-pointer transition-colors">
                            <input type="radio" name="q_${qidStr}" value="${escapedOptionValue}"
                                   class="form-radio h-5 w-5 text-blue-600 focus:ring-blue-500 border-gray-300"
                                   onchange="updateAnswer('${qidStr}', this.value)">
                            <span class="ml-3 text-gray-700">${escapedOptionDisplay}</span>
                        </label>
                    </div>`;
                    })
                    .join("");
            } else if (
                question.type === "multiple-choice" &&
                Array.isArray(question.options)
            ) {
                optionsHtml = question.options
                    .map((optionText) => {
                        const escapedOptionDisplay = escapeHtml(optionText);
                        const escapedOptionValue = escapeHtmlAttr(optionText);
                        return `
                    <div>
                        <label class="flex items-center p-3 rounded-md hover:bg-gray-100 cursor-pointer transition-colors">
                            <input type="radio" name="q_${qidStr}" value="${escapedOptionValue}"
                                   class="form-radio h-5 w-5 text-blue-600 focus:ring-blue-500 border-gray-300"
                                   onchange="updateAnswer('${qidStr}', this.value)">
                            <span class="ml-3 text-gray-700">${escapedOptionDisplay}</span>
                        </label>
                    </div>`;
                    })
                    .join("");
            }

            const questionTextHtml = escapeHtml(question.text);
            questionDiv.innerHTML = `
                <h2 class="text-xl font-semibold text-gray-700 mb-4">I see myself as someone who... <br><strong>${questionTextHtml}</strong></h2>
                <div class="space-y-3">${optionsHtml}</div>
            `;
            try {
                questionsWrapperEl.appendChild(questionDiv);
            } catch (e) {
                console.error(
                    "Error appending question div:",
                    e,
                    "Question ID:",
                    question.id,
                    "HTML:",
                    questionDiv.innerHTML,
                );
            }
        });
    }

    function showQuestion(index) {
        document
            .querySelectorAll(".question-item")
            .forEach((el) => (el.style.display = "none"));
        if (questions[index] && questions[index].id) {
            const currentQuestionEl = document.getElementById(
                `question-${questions[index].id}`,
            );
            if (currentQuestionEl) {
                currentQuestionEl.style.display = "block";
                const qId = questions[index].id;
                if (
                    userAnswers[qId] !== null &&
                    typeof userAnswers[qId] !== "undefined"
                ) {
                    const selectedRadio = currentQuestionEl.querySelector(
                        `input[name="q_${qId}"][value="${escapeHtmlAttr(String(userAnswers[qId]))}"]`,
                    );
                    if (selectedRadio) {
                        selectedRadio.checked = true;
                    }
                }
            }
        }
        questionProgressEl.textContent = `Question ${index + 1} of ${questions.length}`;
    }

    window.updateAnswer = function (questionId, answerValue) {
        try {
            const numValue = parseFloat(answerValue);
            if (!isNaN(numValue) && String(numValue) === String(answerValue)) {
                userAnswers[questionId] = numValue;
            } else {
                userAnswers[questionId] = String(answerValue);
            }
        } catch (e) {
            userAnswers[questionId] = String(answerValue);
        }
    };

    function updateNavigation() {
        prevBtn.disabled = currentQuestionIndex === 0;
        if (currentQuestionIndex === questions.length - 1) {
            nextBtn.style.display = "none";
            submitBtn.style.display = "inline-block";
        } else {
            nextBtn.style.display = "inline-block";
            submitBtn.style.display = "none";
        }
    }

    quizFormEl.addEventListener("submit", function (event) {
        if (quizData && quizData.id === "bfi-10") {
            let allAnswered = true;
            for (const q of questions) {
                if (
                    userAnswers[q.id] === null ||
                    typeof userAnswers[q.id] === "undefined"
                ) {
                    allAnswered = false;
                    break;
                }
            }
            if (!allAnswered) {
                event.preventDefault();
                alert("Please answer all 10 questions before submitting.");
                return;
            }
        }
        allAnswersJsonInput.value = JSON.stringify(userAnswers);
    });

    if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", initializeQuiz);
    } else {
        if (
            document.getElementById("quiz-container") &&
            document.getElementById("quiz-data-json")
        ) {
            initializeQuiz();
        } else {
            document.addEventListener("DOMContentLoaded", initializeQuiz);
        }
    }
</script>
{% endblock %} {% block scripts %} {# Scripts specific to quiz_page are now in
the content block above #} {% endblock %}
</file>

<file path="app/templates/quiz_page copy copy.html">
{% extends "base.html" %} {% block content %}
<script id="quiz-data-json" type="application/json">
    {{ quiz | tojson | safe }}
</script>

<div class="container mx-auto px-4 py-8 mt-6" id="quiz-container">
    <!-- Loading/Error Message Area -->
    <div id="quiz-message-area" class="text-center py-10">
        <p class="text-xl text-gray-700">Loading quiz...</p>
    </div>

    <!-- Quiz Title (populated by JS) -->
    <h1
        id="quiz-title"
        class="text-3xl font-bold text-gray-800 mb-2"
        style="display: none"
    ></h1>

    <!-- Question Progress (populated by JS) -->
    <p
        id="question-progress"
        class="text-sm text-gray-600 mb-6"
        style="display: none"
    ></p>

    <!-- Form will contain all questions, and we'll show/hide them -->
    <form
        id="quiz-form"
        method="POST"
        action="{{ url_for('submit_quiz_route', quiz_id=quiz.id) }}"
        style="display: none"
    >
        <div id="questions-wrapper">
            <!-- Questions will be injected here by JavaScript -->
        </div>

        <!-- Hidden input for all answers -->
        <input type="hidden" name="answers" id="all-answers-json" />

        <!-- Navigation -->
        <div
            id="quiz-navigation"
            class="flex justify-between items-center mt-8"
            style="display: none"
        >
            <button
                type="button"
                id="prev-question-btn"
                onclick="prevQuestion()"
                class="bg-gray-500 hover:bg-gray-600 text-white font-semibold py-2 px-5 rounded-md transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
                Previous
            </button>
            <button
                type="button"
                id="next-question-btn"
                onclick="nextQuestion()"
                class="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-5 rounded-md transition-colors"
            >
                Next
            </button>
            <button
                type="submit"
                id="submit-quiz-btn"
                class="bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-5 rounded-md transition-colors"
                style="display: none"
            >
                Submit Quiz
            </button>
        </div>
    </form>

    <!-- Submitted Message Area (initially hidden) -->
    <div
        id="submitted-message-area"
        class="text-center py-10"
        style="display: none"
    >
        <p class="text-2xl text-green-600 font-semibold">
            Quiz submitted successfully!
        </p>
        <p class="text-gray-600 mt-2">
            You will be redirected to the dashboard shortly.
        </p>
    </div>
</div>

<script>
    let quizData = null;
    let questions = [];
    let currentQuestionIndex = 0;
    let userAnswers = {};

    const quizMessageArea = document.getElementById("quiz-message-area");
    const quizTitleEl = document.getElementById("quiz-title");
    const questionProgressEl = document.getElementById("question-progress");
    const quizFormEl = document.getElementById("quiz-form");
    const questionsWrapperEl = document.getElementById("questions-wrapper");
    const allAnswersJsonInput = document.getElementById("all-answers-json");
    const prevBtn = document.getElementById("prev-question-btn");
    const nextBtn = document.getElementById("next-question-btn");
    const submitBtn = document.getElementById("submit-quiz-btn");
    const quizNavigationEl = document.getElementById("quiz-navigation");

    function escapeHtml(unsafe) {
        if (unsafe === null || typeof unsafe === "undefined") return "";
        return String(unsafe)
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#39;");
    }

    function escapeHtmlAttr(unsafe) {
        // Separate function for attribute values to avoid breaking JS syntax
        if (unsafe === null || typeof unsafe === "undefined") return "";
        return String(unsafe).replace(/"/g, "&quot;").replace(/'/g, "&#39;");
    }

    function initializeQuiz() {
        const quizDataScript = document.getElementById("quiz-data-json");

        if (!quizDataScript || !quizDataScript.textContent) {
            quizMessageArea.innerHTML =
                '<p class="text-xl text-red-600">Error: Quiz data script element missing.</p>';
            return;
        }

        try {
            quizData = JSON.parse(quizDataScript.textContent);
        } catch (e) {
            console.error(
                "Failed to parse quiz data:",
                e,
                "Raw content:",
                quizDataScript.textContent,
            );
            quizMessageArea.innerHTML =
                '<p class="text-xl text-red-600">Error: Could not load quiz data (JSON parse failed).</p>';
            return;
        }

        if (!quizData || !quizData.id || !quizData.title) {
            quizMessageArea.innerHTML =
                '<p class="text-xl text-red-600">Error: Invalid quiz data structure.</p>';
            return;
        }

        questions = quizData.questions || [];
        quizTitleEl.textContent = quizData.title;

        if (questions.length === 0) {
            quizTitleEl.style.display = "block";
            quizMessageArea.innerHTML = `
                <p class="text-xl text-gray-700">This quiz currently has no questions.</p>
                <a href="{{ url_for('dashboard_page_route') }}" class="mt-4 inline-block bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-md transition-colors">
                    Back to Dashboard
                </a>`;
            return;
        }

        userAnswers = {};
        questions.forEach((q) => {
            if (q && q.id) {
                userAnswers[q.id] = null;
            }
        });

        renderQuestions();
        showQuestion(currentQuestionIndex);
        updateNavigation();

        quizMessageArea.style.display = "none";
        quizTitleEl.style.display = "block";
        questionProgressEl.style.display = "block";
        quizFormEl.style.display = "block";
        quizNavigationEl.style.display = "flex";
    }

    function renderQuestions() {
        questionsWrapperEl.innerHTML = "";
        questions.forEach((question) => {
            if (!question || !question.id) {
                console.warn(
                    "Skipping invalid question during render (missing id):",
                    question,
                );
                return;
            }
            const questionDiv = document.createElement("div");
            questionDiv.id = `question-${question.id}`;
            questionDiv.className =
                "bg-white p-6 rounded-xl shadow-lg mb-8 question-item";
            questionDiv.style.display = "none";

            let optionsHtml = "";
            const qidStr = String(question.id);

            if (
                question.type === "multiple-choice" &&
                Array.isArray(question.options_map)
            ) {
                optionsHtml = question.options_map
                    .map((opt) => {
                        const escapedOptionDisplay = escapeHtml(opt.text);
                        const escapedOptionValue = escapeHtmlAttr(
                            String(opt.value),
                        );
                        return `
                    <div>
                        <label class="flex items-center p-3 rounded-md hover:bg-gray-100 cursor-pointer transition-colors">
                            <input type="radio" name="q_${qidStr}" value="${escapedOptionValue}"
                                   class="form-radio h-5 w-5 text-blue-600 focus:ring-blue-500 border-gray-300"
                                   onchange="updateAnswer('${qidStr}', this.value)">
                            <span class="ml-3 text-gray-700">${escapedOptionDisplay}</span>
                        </label>
                    </div>`;
                    })
                    .join("");
            } else if (
                question.type === "multiple-choice" &&
                Array.isArray(question.options)
            ) {
                optionsHtml = question.options
                    .map((optionText) => {
                        const escapedOptionDisplay = escapeHtml(optionText);
                        const escapedOptionValue = escapeHtmlAttr(optionText);
                        return `
                    <div>
                        <label class="flex items-center p-3 rounded-md hover:bg-gray-100 cursor-pointer transition-colors">
                            <input type="radio" name="q_${qidStr}" value="${escapedOptionValue}"
                                   class="form-radio h-5 w-5 text-blue-600 focus:ring-blue-500 border-gray-300"
                                   onchange="updateAnswer('${qidStr}', this.value)">
                            <span class="ml-3 text-gray-700">${escapedOptionDisplay}</span>
                        </label>
                    </div>`;
                    })
                    .join("");
            }

            const questionTextHtml = escapeHtml(question.text);
            questionDiv.innerHTML = `
                <h2 class="text-xl font-semibold text-gray-700 mb-4">I see myself as someone who... <br><strong>${questionTextHtml}</strong></h2>
                <div class="space-y-3">${optionsHtml}</div>
            `;
            try {
                questionsWrapperEl.appendChild(questionDiv);
            } catch (e) {
                console.error(
                    "Error appending question div:",
                    e,
                    "Question ID:",
                    question.id,
                    "HTML:",
                    questionDiv.innerHTML,
                );
            }
        });
    }

    function showQuestion(index) {
        document
            .querySelectorAll(".question-item")
            .forEach((el) => (el.style.display = "none"));
        if (questions[index] && questions[index].id) {
            const currentQuestionEl = document.getElementById(
                `question-${questions[index].id}`,
            );
            if (currentQuestionEl) {
                currentQuestionEl.style.display = "block";
                const qId = questions[index].id;
                if (
                    userAnswers[qId] !== null &&
                    typeof userAnswers[qId] !== "undefined"
                ) {
                    const selectedRadio = currentQuestionEl.querySelector(
                        `input[name="q_${qId}"][value="${escapeHtmlAttr(String(userAnswers[qId]))}"]`,
                    );
                    if (selectedRadio) {
                        selectedRadio.checked = true;
                    }
                }
            }
        }
        questionProgressEl.textContent = `Question ${index + 1} of ${questions.length}`;
    }

    window.updateAnswer = function (questionId, answerValue) {
        try {
            const numValue = parseFloat(answerValue);
            if (!isNaN(numValue) && String(numValue) === String(answerValue)) {
                userAnswers[questionId] = numValue;
            } else {
                userAnswers[questionId] = String(answerValue);
            }
        } catch (e) {
            userAnswers[questionId] = String(answerValue);
        }
    };

    // --- ADDED FUNCTIONS ---
    function nextQuestion() {
        if (currentQuestionIndex < questions.length - 1) {
            currentQuestionIndex++;
            showQuestion(currentQuestionIndex);
            updateNavigation();
        }
    }

    function prevQuestion() {
        if (currentQuestionIndex > 0) {
            currentQuestionIndex--;
            showQuestion(currentQuestionIndex);
            updateNavigation();
        }
    }
    // --- END ADDED FUNCTIONS ---

    function updateNavigation() {
        prevBtn.disabled = currentQuestionIndex === 0;
        if (currentQuestionIndex === questions.length - 1) {
            nextBtn.style.display = "none";
            submitBtn.style.display = "inline-block";
        } else {
            nextBtn.style.display = "inline-block";
            submitBtn.style.display = "none";
        }
    }

    quizFormEl.addEventListener("submit", function (event) {
        if (quizData && quizData.id === "bfi-10") {
            let allAnswered = true;
            for (const q of questions) {
                if (
                    userAnswers[q.id] === null ||
                    typeof userAnswers[q.id] === "undefined"
                ) {
                    allAnswered = false;
                    break;
                }
            }
            if (!allAnswered) {
                event.preventDefault();
                alert("Please answer all 10 questions before submitting.");
                return;
            }
        }
        allAnswersJsonInput.value = JSON.stringify(userAnswers);
    });

    if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", initializeQuiz);
    } else {
        if (
            document.getElementById("quiz-container") &&
            document.getElementById("quiz-data-json")
        ) {
            initializeQuiz();
        } else {
            document.addEventListener("DOMContentLoaded", initializeQuiz);
        }
    }
</script>
{% endblock %} {% block scripts %} {# Scripts specific to quiz_page are now in
the content block above #} {% endblock %}
</file>

<file path="app/templates/quiz_page copy.html">
{% extends "base.html" %} {% block content %}
<script id="quiz-data-json" type="application/json">
    {{ quiz | tojson | safe }}
</script>

<div class="container mx-auto px-4 py-8 mt-6" id="quiz-container">
    <!-- Loading/Error Message Area -->
    <div id="quiz-message-area" class="text-center py-10">
        <p class="text-xl text-gray-700">Loading quiz...</p>
    </div>

    <!-- Quiz Title (populated by JS) -->
    <h1
        id="quiz-title"
        class="text-3xl font-bold text-gray-800 mb-2"
        style="display: none"
    ></h1>

    <!-- Question Progress (populated by JS) -->
    <p
        id="question-progress"
        class="text-sm text-gray-600 mb-6"
        style="display: none"
    ></p>

    <!-- Form will contain all questions, and we'll show/hide them -->
    <form
        id="quiz-form"
        method="POST"
        action="{{ url_for('submit_quiz_route', quiz_id=quiz.id) }}"
        style="display: none"
    >
        <div id="questions-wrapper">
            <!-- Questions will be injected here by JavaScript -->
        </div>

        <!-- Hidden input for all answers -->
        <input type="hidden" name="answers" id="all-answers-json" />

        <!-- Navigation -->
        <div
            id="quiz-navigation"
            class="flex justify-between items-center mt-8"
            style="display: none"
        >
            <button
                type="button"
                id="prev-question-btn"
                onclick="prevQuestion()"
                class="bg-gray-500 hover:bg-gray-600 text-white font-semibold py-2 px-5 rounded-md transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
                Previous
            </button>
            <button
                type="button"
                id="next-question-btn"
                onclick="nextQuestion()"
                class="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-5 rounded-md transition-colors"
            >
                Next
            </button>
            <button
                type="submit"
                id="submit-quiz-btn"
                class="bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-5 rounded-md transition-colors"
                style="display: none"
            >
                Submit Quiz
            </button>
        </div>
    </form>

    <!-- Submitted Message Area (initially hidden) -->
    <div
        id="submitted-message-area"
        class="text-center py-10"
        style="display: none"
    >
        <p class="text-2xl text-green-600 font-semibold">
            Quiz submitted successfully!
        </p>
        <p class="text-gray-600 mt-2">
            You will be redirected to the dashboard shortly.
        </p>
    </div>
</div>

<script>
    let quizData = null;
    let questions = [];
    let currentQuestionIndex = 0;
    let userAnswers = {};

    const quizMessageArea = document.getElementById("quiz-message-area");
    const quizTitleEl = document.getElementById("quiz-title");
    const questionProgressEl = document.getElementById("question-progress");
    const quizFormEl = document.getElementById("quiz-form");
    const questionsWrapperEl = document.getElementById("questions-wrapper");
    const allAnswersJsonInput = document.getElementById("all-answers-json");
    const prevBtn = document.getElementById("prev-question-btn");
    const nextBtn = document.getElementById("next-question-btn");
    const submitBtn = document.getElementById("submit-quiz-btn");
    const quizNavigationEl = document.getElementById("quiz-navigation");

    function escapeHtml(unsafe) {
        if (unsafe === null || typeof unsafe === "undefined") return "";
        return String(unsafe)
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#39;");
    }

    function escapeHtmlAttr(unsafe) {
        // Separate function for attribute values to avoid breaking JS syntax
        if (unsafe === null || typeof unsafe === "undefined") return "";
        return String(unsafe).replace(/"/g, "&quot;").replace(/'/g, "&#39;");
    }

    function initializeQuiz() {
        const quizDataScript = document.getElementById("quiz-data-json");

        if (!quizDataScript || !quizDataScript.textContent) {
            quizMessageArea.innerHTML =
                '<p class="text-xl text-red-600">Error: Quiz data script element missing.</p>';
            return;
        }

        try {
            quizData = JSON.parse(quizDataScript.textContent);
        } catch (e) {
            console.error(
                "Failed to parse quiz data:",
                e,
                "Raw content:",
                quizDataScript.textContent,
            );
            quizMessageArea.innerHTML =
                '<p class="text-xl text-red-600">Error: Could not load quiz data (JSON parse failed).</p>';
            return;
        }

        if (!quizData || !quizData.id || !quizData.title) {
            quizMessageArea.innerHTML =
                '<p class="text-xl text-red-600">Error: Invalid quiz data structure.</p>';
            return;
        }

        questions = quizData.questions || [];
        quizTitleEl.textContent = quizData.title;

        if (questions.length === 0) {
            quizTitleEl.style.display = "block";
            quizMessageArea.innerHTML = `
                <p class="text-xl text-gray-700">This quiz currently has no questions.</p>
                <a href="{{ url_for('dashboard_page_route') }}" class="mt-4 inline-block bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-md transition-colors">
                    Back to Dashboard
                </a>`;
            return;
        }

        userAnswers = {};
        questions.forEach((q) => {
            if (q && q.id) {
                userAnswers[q.id] = null;
            }
        });

        renderQuestions();
        showQuestion(currentQuestionIndex);
        updateNavigation();

        quizMessageArea.style.display = "none";
        quizTitleEl.style.display = "block";
        questionProgressEl.style.display = "block";
        quizFormEl.style.display = "block";
        quizNavigationEl.style.display = "flex";
    }

    function renderQuestions() {
        questionsWrapperEl.innerHTML = "";
        questions.forEach((question) => {
            if (!question || !question.id) {
                console.warn(
                    "Skipping invalid question during render (missing id):",
                    question,
                );
                return;
            }
            const questionDiv = document.createElement("div");
            questionDiv.id = `question-${question.id}`;
            questionDiv.className =
                "bg-white p-6 rounded-xl shadow-lg mb-8 question-item";
            questionDiv.style.display = "none";

            let optionsHtml = "";
            const qidStr = String(question.id);

            if (
                question.type === "multiple-choice" &&
                Array.isArray(question.options_map)
            ) {
                optionsHtml = question.options_map
                    .map((opt) => {
                        const escapedOptionDisplay = escapeHtml(opt.text);
                        const escapedOptionValue = escapeHtmlAttr(
                            String(opt.value),
                        );
                        return `
                    <div>
                        <label class="flex items-center p-3 rounded-md hover:bg-gray-100 cursor-pointer transition-colors">
                            <input type="radio" name="q_${qidStr}" value="${escapedOptionValue}"
                                   class="form-radio h-5 w-5 text-blue-600 focus:ring-blue-500 border-gray-300"
                                   onchange="updateAnswer('${qidStr}', this.value)">
                            <span class="ml-3 text-gray-700">${escapedOptionDisplay}</span>
                        </label>
                    </div>`;
                    })
                    .join("");
            } else if (
                question.type === "multiple-choice" &&
                Array.isArray(question.options)
            ) {
                optionsHtml = question.options
                    .map((optionText) => {
                        const escapedOptionDisplay = escapeHtml(optionText);
                        const escapedOptionValue = escapeHtmlAttr(optionText);
                        return `
                    <div>
                        <label class="flex items-center p-3 rounded-md hover:bg-gray-100 cursor-pointer transition-colors">
                            <input type="radio" name="q_${qidStr}" value="${escapedOptionValue}"
                                   class="form-radio h-5 w-5 text-blue-600 focus:ring-blue-500 border-gray-300"
                                   onchange="updateAnswer('${qidStr}', this.value)">
                            <span class="ml-3 text-gray-700">${escapedOptionDisplay}</span>
                        </label>
                    </div>`;
                    })
                    .join("");
            }

            const questionTextHtml = escapeHtml(question.text);
            questionDiv.innerHTML = `
                <h2 class="text-xl font-semibold text-gray-700 mb-4">I see myself as someone who... <br><strong>${questionTextHtml}</strong></h2>
                <div class="space-y-3">${optionsHtml}</div>
            `;
            try {
                questionsWrapperEl.appendChild(questionDiv);
            } catch (e) {
                console.error(
                    "Error appending question div:",
                    e,
                    "Question ID:",
                    question.id,
                    "HTML:",
                    questionDiv.innerHTML,
                );
            }
        });
    }

    function showQuestion(index) {
        document
            .querySelectorAll(".question-item")
            .forEach((el) => (el.style.display = "none"));
        if (questions[index] && questions[index].id) {
            const currentQuestionEl = document.getElementById(
                `question-${questions[index].id}`,
            );
            if (currentQuestionEl) {
                currentQuestionEl.style.display = "block";
                const qId = questions[index].id;
                if (
                    userAnswers[qId] !== null &&
                    typeof userAnswers[qId] !== "undefined"
                ) {
                    const selectedRadio = currentQuestionEl.querySelector(
                        `input[name="q_${qId}"][value="${escapeHtmlAttr(String(userAnswers[qId]))}"]`,
                    );
                    if (selectedRadio) {
                        selectedRadio.checked = true;
                    }
                }
            }
        }
        questionProgressEl.textContent = `Question ${index + 1} of ${questions.length}`;
    }

    window.updateAnswer = function (questionId, answerValue) {
        try {
            const numValue = parseFloat(answerValue);
            if (!isNaN(numValue) && String(numValue) === String(answerValue)) {
                userAnswers[questionId] = numValue;
            } else {
                userAnswers[questionId] = String(answerValue);
            }
        } catch (e) {
            userAnswers[questionId] = String(answerValue);
        }
    };

    // --- ADDED FUNCTIONS ---
    function nextQuestion() {
        if (currentQuestionIndex < questions.length - 1) {
            currentQuestionIndex++;
            showQuestion(currentQuestionIndex);
            updateNavigation();
        }
    }

    function prevQuestion() {
        if (currentQuestionIndex > 0) {
            currentQuestionIndex--;
            showQuestion(currentQuestionIndex);
            updateNavigation();
        }
    }
    // --- END ADDED FUNCTIONS ---

    function updateNavigation() {
        prevBtn.disabled = currentQuestionIndex === 0;
        if (currentQuestionIndex === questions.length - 1) {
            nextBtn.style.display = "none";
            submitBtn.style.display = "inline-block";
        } else {
            nextBtn.style.display = "inline-block";
            submitBtn.style.display = "none";
        }
    }

    quizFormEl.addEventListener("submit", function (event) {
        if (quizData && quizData.id === "bfi-10") {
            let allAnswered = true;
            for (const q of questions) {
                if (
                    userAnswers[q.id] === null ||
                    typeof userAnswers[q.id] === "undefined"
                ) {
                    allAnswered = false;
                    break;
                }
            }
            if (!allAnswered) {
                event.preventDefault();
                alert("Please answer all 10 questions before submitting.");
                return;
            }
        }
        allAnswersJsonInput.value = JSON.stringify(userAnswers);
    });

    if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", initializeQuiz);
    } else {
        if (
            document.getElementById("quiz-container") &&
            document.getElementById("quiz-data-json")
        ) {
            initializeQuiz();
        } else {
            document.addEventListener("DOMContentLoaded", initializeQuiz);
        }
    }
</script>
{% endblock %} {% block scripts %} {# Scripts specific to quiz_page are now in
the content block above #} {% endblock %}
</file>

<file path="app/templates/quiz_page.html">
<file path="app/templates/quiz_page.html">
    <!-- app/templates/quiz_page.html -->
    {% extends "base.html" %} {% block content %}
    <script id="quiz-data-json" type="application/json">
        {{ quiz | tojson | safe }}
    </script>

    <div class="container mx-auto px-4 py-8 mt-6" id="quiz-container">
        <!-- Back to Dashboard Button -->
        <div class="mb-2">
            <!-- Reduced margin from mb-4 to mb-2 -->
            <a
                href="{{ url_for('dashboard_page_route') }}"
                class="inline-flex items-center p-2 text-black hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 rounded-md transition-colors"
                title="Back to Dashboard"
            >
                <svg
                    class="w-6 h-6"
                    fill="currentColor"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M10 19l-7-7m0 0l7-7m-7 7h18"
                    ></path>
                </svg>
            </a>
        </div>

        <!-- Loading/Error Message Area -->
        <div id="quiz-message-area" class="text-center py-10">
            <p class="text-xl text-gray-700">Loading quiz...</p>
        </div>

        <h1
            id="quiz-title"
            class="text-2xl font-bold text-gray-800 mb-1 text-center"
            style="display: none"
        ></h1>
        <p
            id="question-progress"
            class="text-sm text-gray-600 mb-4 text-center"
            style="display: none"
        ></p>

        <!-- Form will contain all questions -->
        <form
            id="quiz-form"
            method="POST"
            action="{{ url_for('submit_quiz_route', quiz_id=quiz.id) }}"
            style="display: none"
        >
            <div id="questions-wrapper">
                <!-- Questions will be injected here by JavaScript -->
            </div>

            <input type="hidden" name="answers" id="all-answers-json" />

            <!-- Navigation -->
            <div
                id="quiz-navigation"
                class="flex justify-between items-center mt-8"
            >
                <button
                    type="button"
                    id="prev-question-btn"
                    onclick="prevQuestion()"
                    class="bg-gray-500 hover:bg-gray-600 text-white font-semibold py-2 px-5 rounded-md transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                    Previous
                </button>
                <button
                    type="button"
                    id="next-question-btn"
                    onclick="nextQuestion()"
                    class="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-5 rounded-md transition-colors"
                >
                    Next
                </button>
                <button
                    type="submit"
                    id="submit-quiz-btn"
                    class="bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-5 rounded-md transition-colors"
                    style="display: none"
                >
                    Submit Quiz
                </button>
            </div>
        </form>

        <!-- Submitted Message Area -->
        <div
            id="submitted-message-area"
            class="text-center py-10"
            style="display: none"
        >
            <p class="text-2xl text-green-600 font-semibold">
                Quiz submitted successfully!
            </p>
            <p class="text-gray-600 mt-2">
                You will be redirected to the dashboard shortly.
            </p>
        </div>
    </div>

    <script>
        let quizData = null;
        let questions = [];
        let currentQuestionIndex = 0;
        let userAnswers = {};

        const quizMessageArea = document.getElementById("quiz-message-area");
        const quizTitleEl = document.getElementById("quiz-title");
        const questionProgressEl = document.getElementById("question-progress");
        const quizFormEl = document.getElementById("quiz-form");
        const questionsWrapperEl = document.getElementById("questions-wrapper");
        const allAnswersJsonInput = document.getElementById("all-answers-json");
        const prevBtn = document.getElementById("prev-question-btn");
        const nextBtn = document.getElementById("next-question-btn");
        const submitBtn = document.getElementById("submit-quiz-btn");
        const quizNavigationEl = document.getElementById("quiz-navigation");

        function escapeHtml(unsafe) {
            if (unsafe === null || typeof unsafe === "undefined") return "";
            return String(unsafe)
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#39;");
        }

        function escapeHtmlAttr(unsafe) {
            // Separate function for attribute values to avoid breaking JS syntax
            if (unsafe === null || typeof unsafe === "undefined") return "";
            return String(unsafe)
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#39;");
        }

        function capitalizeFirstLetter(string) {
            if (!string || string.length === 0) return string;
            return string.charAt(0).toUpperCase() + string.slice(1);
        }

        function updateSliderValueDisplay(questionId, value) {
            const displayEl = document.getElementById(
                `slider-value-display-${questionId}`,
            );
            const question = questions.find((q) => q.id === questionId);
            if (displayEl && question && question.options_map) {
                const selectedOption = question.options_map.find(
                    (opt) => String(opt.value) === String(value),
                );
                if (selectedOption) {
                    let textToDisplay = selectedOption.text;
                    const parenIndex = textToDisplay.lastIndexOf(" (");
                    if (parenIndex !== -1) {
                        textToDisplay = textToDisplay.substring(0, parenIndex);
                    }
                    textToDisplay = capitalizeFirstLetter(textToDisplay);
                    displayEl.textContent = escapeHtml(textToDisplay);
                } else {
                    displayEl.textContent = "N/A";
                }
            }
        }

        function initializeQuiz() {
            const quizDataScript = document.getElementById("quiz-data-json");
            if (!quizDataScript || !quizDataScript.textContent) {
                quizMessageArea.innerHTML =
                    '<p class="text-xl text-red-600">Error: Quiz data script element missing.</p>';
                return;
            }
            try {
                quizData = JSON.parse(quizDataScript.textContent);
            } catch (e) {
                console.error("Failed to parse quiz data:", e);
                quizMessageArea.innerHTML =
                    '<p class="text-xl text-red-600">Error: Could not load quiz data.</p>';
                return;
            }

            if (!quizData || !quizData.id || !quizData.title) {
                quizMessageArea.innerHTML =
                    '<p class="text-xl text-red-600">Error: Invalid quiz data structure.</p>';
                return;
            }

            questions = quizData.questions || [];
            quizTitleEl.textContent = quizData.title;

            if (questions.length === 0) {
                quizTitleEl.style.display = "block";
                quizMessageArea.innerHTML = `
                    <p class="text-xl text-gray-700">This quiz currently has no questions.</p>
                    <a href="{{ url_for('dashboard_page_route') }}" class="mt-4 inline-block bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-md transition-colors">
                        Back to Dashboard
                    </a>`;
                return;
            }

            userAnswers = {};
            questions.forEach((q) => {
                if (q && q.id) {
                    // MODIFIED SECTION - START
                    if (
                        quizData.id === "bfi-10" &&
                        q.type === "multiple-choice" &&
                        Array.isArray(q.options_map)
                    ) {
                        // For BFI-10 sliders, initialize with the default middle value (3 for a 1-5 scale).
                        // This ensures that userAnswers has a numeric value from the start,
                        // preventing the "unanswered" validation from blocking the JSON population
                        // if the user doesn't interact with a slider.
                        // The options_map values are 1, 2, 3, 4, 5. So 3 is the neutral/default.
                        userAnswers[q.id] = 3;
                    } else {
                        userAnswers[q.id] = null; // Default for other question types
                    }
                    // MODIFIED SECTION - END
                }
            });

            renderQuestions();
            showQuestion(currentQuestionIndex);
            updateNavigation();

            quizMessageArea.style.display = "none";
            quizTitleEl.style.display = "block";
            questionProgressEl.style.display = "block";
            quizFormEl.style.display = "block";
            quizNavigationEl.style.display = "flex";
        }

        function renderQuestions() {
            questionsWrapperEl.innerHTML = "";
            questions.forEach((question) => {
                if (!question || !question.id) {
                    console.warn(
                        "Skipping invalid question during render:",
                        question,
                    );
                    return;
                }
                const questionDiv = document.createElement("div");
                questionDiv.id = `question-${question.id}`;
                questionDiv.className =
                    "bg-white p-12 rounded-xl shadow-lg mb-8 question-item";
                questionDiv.style.display = "none";

                const qidStr = String(question.id);
                let displayQuestionText = escapeHtml(question.text);
                if (displayQuestionText.startsWith("...")) {
                    displayQuestionText = displayQuestionText
                        .substring(3)
                        .trim();
                }

                const questionStatementHtml = `
                    <h2 class="text-xl font-semibold text-gray-700 text-center mb-10">
                        I see myself as someone who
                        <span class="bg-yellow-200 px-2 py-1 rounded">${displayQuestionText}</span>
                    </h2>`;

                let optionsHtml = "";
                let currentSelectionDisplayHtml = "";

                if (
                    quizData.id === "bfi-10" &&
                    question.type === "multiple-choice" &&
                    Array.isArray(question.options_map)
                ) {
                    const optionsMap = question.options_map;
                    // initialSliderValue will now correctly be sourced from userAnswers[qidStr] which is pre-filled (e.g., 3)
                    let initialSliderValue =
                        userAnswers[qidStr] !== null &&
                        typeof userAnswers[qidStr] !== "undefined"
                            ? userAnswers[qidStr]
                            : 3; // Fallback, though userAnswers should be set

                    const currentOptionObj =
                        optionsMap.find(
                            (opt) =>
                                String(opt.value) ===
                                String(initialSliderValue),
                        ) ||
                        optionsMap.find((opt) => String(opt.value) === "3");

                    let initialDisplayLabel = "Neutral";
                    if (currentOptionObj) {
                        let textToDisplay = currentOptionObj.text;
                        const parenIndex = textToDisplay.lastIndexOf(" (");
                        if (parenIndex !== -1) {
                            textToDisplay = textToDisplay.substring(
                                0,
                                parenIndex,
                            );
                        }
                        initialDisplayLabel =
                            capitalizeFirstLetter(textToDisplay);
                    }

                    currentSelectionDisplayHtml = `
                        <div id="slider-value-display-${qidStr}" class="text-3xl text-green-600 font-semibold text-center mb-10">
                            ${escapeHtml(initialDisplayLabel)}
                        </div>`;

                    let startLabelText = optionsMap[0].text;
                    const startParenIdx = startLabelText.lastIndexOf(" (");
                    if (startParenIdx !== -1) {
                        startLabelText = startLabelText.substring(
                            0,
                            startParenIdx,
                        );
                    }
                    startLabelText = capitalizeFirstLetter(startLabelText);

                    let endLabelText = optionsMap[optionsMap.length - 1].text;
                    const endParenIdx = endLabelText.lastIndexOf(" (");
                    if (endParenIdx !== -1) {
                        endLabelText = endLabelText.substring(0, endParenIdx);
                    }
                    endLabelText = capitalizeFirstLetter(endLabelText);

                    optionsHtml = `
                        <div class="slider-container mx-auto" style="max-width: 500px;">
                            <div class="flex justify-between w-full mb-3 px-1" aria-hidden="true">
                                <span class="w-1.5 h-1.5 bg-gray-300 rounded-full"></span>
                                <span class="w-1.5 h-1.5 bg-gray-300 rounded-full"></span>
                                <span class="w-1.5 h-1.5 bg-gray-300 rounded-full"></span>
                                <span class="w-1.5 h-1.5 bg-gray-300 rounded-full"></span>
                                <span class="w-1.5 h-1.5 bg-gray-300 rounded-full"></span>
                            </div>

                            <input type="range" id="slider-${qidStr}" name="q_${qidStr}"
                                   min="${escapeHtmlAttr(String(optionsMap[0].value))}"
                                   max="${escapeHtmlAttr(String(optionsMap[optionsMap.length - 1].value))}"
                                   value="${escapeHtmlAttr(String(initialSliderValue))}" step="1"
                                   class="w-full h-3 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-blue-600 outline-none"
                                   oninput="updateSliderValueDisplay('${qidStr}', this.value); updateAnswer('${qidStr}', this.value);">

                            <div class="flex justify-between text-xs text-gray-500 mt-2 px-1">
                                <span>${escapeHtml(startLabelText)}</span>
                                <span>${escapeHtml(endLabelText)}</span>
                            </div>
                        </div>`;
                } else if (
                    question.type === "multiple-choice" &&
                    (Array.isArray(question.options_map) ||
                        Array.isArray(question.options))
                ) {
                    const optsArray = question.options_map || question.options;
                    let radioOptionsListHtml = optsArray
                        .map((opt) => {
                            const isMapped = !!question.options_map;
                            const optionValue = isMapped
                                ? String(opt.value)
                                : opt;
                            const optionDisplay = isMapped ? opt.text : opt;
                            return `
                            <div>
                                <label class="flex items-center p-3 rounded-md hover:bg-gray-100 cursor-pointer transition-colors">
                                    <input type="radio" name="q_${qidStr}" value="${escapeHtmlAttr(optionValue)}"
                                           class="form-radio h-5 w-5 text-blue-600 focus:ring-blue-500 border-gray-300"
                                           onchange="updateAnswer('${qidStr}', this.value)">
                                    <span class="ml-3 text-gray-700">${escapeHtml(optionDisplay)}</span>
                                </label>
                            </div>`;
                        })
                        .join("");
                    optionsHtml = `<div class="space-y-3 mt-10">${radioOptionsListHtml}</div>`;
                }

                questionDiv.innerHTML = `${questionStatementHtml} ${currentSelectionDisplayHtml} ${optionsHtml}`;
                questionsWrapperEl.appendChild(questionDiv);
            });
        }

        function showQuestion(index) {
            document
                .querySelectorAll(".question-item")
                .forEach((el) => (el.style.display = "none"));

            if (questions[index] && questions[index].id) {
                const qId = questions[index].id;
                const currentQuestionEl = document.getElementById(
                    `question-${qId}`,
                );
                if (currentQuestionEl) {
                    currentQuestionEl.style.display = "block";
                    const answer = userAnswers[qId]; // This will be the pre-filled value (e.g., 3) for BFI-10

                    if (
                        quizData.id === "bfi-10" &&
                        questions[index].type === "multiple-choice" &&
                        Array.isArray(questions[index].options_map)
                    ) {
                        const slider = currentQuestionEl.querySelector(
                            `input[type="range"][name="q_${qId}"]`,
                        );
                        if (slider) {
                            // 'answer' will be the numeric value from userAnswers (e.g., 3)
                            let sliderValueToSet =
                                answer !== null && typeof answer !== "undefined"
                                    ? answer
                                    : 3;
                            slider.value = String(sliderValueToSet);
                            updateSliderValueDisplay(qId, slider.value);
                        }
                    } else {
                        if (answer !== null && typeof answer !== "undefined") {
                            const selectedRadio =
                                currentQuestionEl.querySelector(
                                    `input[name="q_${qId}"][value="${escapeHtmlAttr(String(answer))}"]`,
                                );
                            if (selectedRadio) selectedRadio.checked = true;
                        }
                    }
                }
            }
            questionProgressEl.textContent = `Question ${index + 1} of ${questions.length}`;
        }

        window.updateAnswer = function (questionId, answerValue) {
            if (quizData.id === "bfi-10") {
                userAnswers[questionId] = parseFloat(answerValue); // answerValue from slider is string
            } else {
                try {
                    const numValue = parseFloat(answerValue);
                    userAnswers[questionId] =
                        !isNaN(numValue) &&
                        String(numValue) === String(answerValue)
                            ? numValue
                            : String(answerValue);
                } catch (e) {
                    userAnswers[questionId] = String(answerValue);
                }
            }
        };

        function nextQuestion() {
            if (currentQuestionIndex < questions.length - 1) {
                currentQuestionIndex++;
                showQuestion(currentQuestionIndex);
                updateNavigation();
            }
        }

        function prevQuestion() {
            if (currentQuestionIndex > 0) {
                currentQuestionIndex--;
                showQuestion(currentQuestionIndex);
                updateNavigation();
            }
        }

        function updateNavigation() {
            prevBtn.disabled = currentQuestionIndex === 0;
            nextBtn.style.display =
                currentQuestionIndex === questions.length - 1
                    ? "none"
                    : "inline-block";
            submitBtn.style.display =
                currentQuestionIndex === questions.length - 1
                    ? "inline-block"
                    : "none";
        }

        quizFormEl.addEventListener("submit", function (event) {
            if (quizData && quizData.id === "bfi-10") {
                let firstUnansweredQ = null;
                let firstUnansweredIndex = -1;
                for (let i = 0; i < questions.length; i++) {
                    // For BFI-10, userAnswers[questions[i].id] will now be a number (e.g., 3)
                    // so this condition (=== null or undefined) will be false if all defaults are set.
                    if (
                        userAnswers[questions[i].id] === null ||
                        typeof userAnswers[questions[i].id] === "undefined"
                    ) {
                        firstUnansweredQ = questions[i];
                        firstUnansweredIndex = i;
                        break;
                    }
                }
                if (firstUnansweredQ) {
                    event.preventDefault();
                    currentQuestionIndex = firstUnansweredIndex;
                    showQuestion(currentQuestionIndex);
                    updateNavigation();
                    let qText = escapeHtml(firstUnansweredQ.text).startsWith(
                        "...",
                    )
                        ? escapeHtml(firstUnansweredQ.text).substring(3).trim()
                        : escapeHtml(firstUnansweredQ.text);
                    alert(
                        `Please provide an answer for: "I see myself as someone who ${qText}" (Question ${firstUnansweredIndex + 1}).`,
                    );
                    return; // Important: exit listener so allAnswersJsonInput is not populated if validation fails
                }
            }
            // If validation passes (or not BFI-10), this line will now correctly execute.
            allAnswersJsonInput.value = JSON.stringify(userAnswers);
        });

        if (document.readyState === "loading") {
            document.addEventListener("DOMContentLoaded", initializeQuiz);
        } else {
            if (
                document.getElementById("quiz-container") &&
                document.getElementById("quiz-data-json")
            ) {
                initializeQuiz();
            } else {
                document.addEventListener("DOMContentLoaded", initializeQuiz);
            }
        }
    </script>
    {% endblock %} {% block scripts %} {# Scripts specific to quiz_page are now
    in the content block above #} {% endblock %}
</file>
</file>

<file path="app/templates/report_page.html">
<!-- app/templates/report_page.html -->
{% extends "base.html" %} {% block content %}
<div class="container mx-auto px-4 py-8 mt-6">
    <!-- Back to Dashboard Arrow Button -->
    <div class="mb-4">
        <!-- Increased mb slightly for better spacing before the white card -->
        <a
            href="{{ url_for('dashboard_page_route') }}"
            class="inline-flex items-center p-2 text-black hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 rounded-md transition-colors"
            title="Back to Dashboard"
        >
            <svg
                class="w-6 h-6"
                fill="currentColor"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
            >
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M10 19l-7-7m0 0l7-7m-7 7h18"
                ></path>
            </svg>
            <!-- Optional: add text here if desired, e.g., <span class="ml-2">Back</span> -->
        </a>
    </div>

    <div class="bg-white p-8 rounded-xl shadow-2xl">
        <div class="mb-6 pb-4 border-b">
            <h1 class="text-4xl font-bold text-gray-800">
                {{ report.quiz_title | e }}
            </h1>
            <p class="text-md text-gray-600 mt-2">
                Completed on: {{ report.date_taken.strftime('%B %d, %Y at
                %H:%M') if report.date_taken else 'N/A' }}
            </p>
        </div>

        <div class="mb-8">
            <h2 class="text-2xl font-semibold text-gray-700 mb-3">
                Quiz Description
            </h2>
            <p class="text-gray-600 leading-relaxed">
                {{ report.quiz_description | e if report.quiz_description else
                "No description provided for this quiz." }}
            </p>
        </div>

        <div class="mb-8">
            <h2 class="text-2xl font-semibold text-gray-700 mb-3">
                Your Score
            </h2>
            {% if report.score is string %}
            <p
                class="text-5xl font-bold {% if report.score.replace('%','') | int >= 80 %}text-green-600{% elif report.score.replace('%','') | int >= 50 %}text-yellow-500{% else %}text-red-600{% endif %}"
            >
                {{ report.score | e }}
            </p>
            {% else %}
            <p class="text-gray-600">
                Score information is not available in a simple format for this
                quiz type. Please see specific details if provided.
            </p>
            {% endif %}
        </div>

        <!-- Answers Submitted section removed -->

        <!-- Back to Dashboard button at the bottom removed -->
    </div>
</div>
{% endblock %} {% block scripts %} {{ super() }}
<!-- Add any page-specific JS here if needed -->
{% endblock %}
</file>

<file path="app/main.py">
# app/main.py
import json
from datetime import datetime
from typing import Optional, Dict, Any, Union, List
from pathlib import Path
from uuid import uuid4
import logging
import html
import os # For environment variables

from fastapi import FastAPI, Request, Form, HTTPException, Depends, Response
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates

from pymongo import MongoClient
from bson import ObjectId # Not strictly needed if using custom 'id' for queries
from dotenv import load_dotenv

# --- Constants & Configuration ---
load_dotenv() # Load environment variables from .env file

BASE_DIR = Path(__file__).resolve().parent
TEMPLATES_DIR = BASE_DIR / "templates"
QUIZZES_DATA_FILE = BASE_DIR / "quizzes_data.json"

# --- Logging Setup ---
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(name)s: %(message)s')
logger = logging.getLogger(__name__)

# --- MongoDB Connection ---
MONGO_URI = os.getenv("MONGO_URI")
MONGO_DB_NAME = os.getenv("MONGO_DB_NAME") # This was 'dirah' in your logs, make sure .env matches if 'thinksync' is intended
MONGO_REPORTS_COLLECTION = os.getenv("MONGO_REPORTS_COLLECTION")

mongo_client: Optional[MongoClient] = None
db = None
reports_collection = None # Initialize as None

if not MONGO_URI or not MONGO_DB_NAME or not MONGO_REPORTS_COLLECTION:
    logger.critical("MongoDB environment variables (MONGO_URI, MONGO_DB_NAME, MONGO_REPORTS_COLLECTION) not fully set. MongoDB integration will be disabled.")
else:
    try:
        mongo_client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000) # Timeout for connection
        mongo_client.admin.command('ping') # Verify connection
        db = mongo_client[MONGO_DB_NAME]
        reports_collection = db[MONGO_REPORTS_COLLECTION]
        logger.info(f"Successfully connected to MongoDB Atlas. Database: {MONGO_DB_NAME}, Collection: {MONGO_REPORTS_COLLECTION}")
    except Exception as e:
        logger.error(f"Failed to connect to MongoDB: {e}. MongoDB integration will be disabled.")
        mongo_client = None
        db = None
        reports_collection = None # Ensure it's None on failure


# Hardcoded users for POC
FAKE_USERS_DB = {
    "user1@example.com": {
        "hashed_password": "password123", # Plain text for POC simplicity
        "email": "user1@example.com",
        "id": "user1"
    },
    "user2@example.com": {
        "hashed_password": "password456",
        "email": "user2@example.com",
        "id": "user2"
    }
}

# --- Application Setup ---
app = FastAPI(title="mansematch")

templates = Jinja2Templates(directory=str(TEMPLATES_DIR))
templates.env.globals['html_escape'] = html.escape
templates.env.filters['json_dumps'] = json.dumps # For passing data to JS in templates

# --- BFI-10 Specific Data ---
BFI10_TRAIT_DESCRIPTIONS = {
    "Extraversion": "Reflects tendency to be sociable, assertive, and energetic vs. reserved and quiet.",
    "Agreeableness": "Reflects tendency to be compassionate, cooperative, and kind vs. antagonistic and critical.",
    "Conscientiousness": "Reflects tendency to be organized, dependable, and responsible vs. careless and impulsive.",
    "Neuroticism": "Reflects tendency to experience negative emotions, such as anxiety and sadness (Emotional Stability is the inverse).",
    "Openness": "Reflects tendency to be imaginative, curious, and open to new experiences vs. conventional and preferring routine."
}

def get_bfi10_interpretation_details(trait_name: str, score: Optional[float]) -> Dict[str, str]:
    level = "N/A"
    level_description = "Score not available or trait not applicable."
    if score is not None:
        if score < 2.5:
            level = "Low"
            if trait_name == "Neuroticism":
                level_description = "Indicates a tendency to be calm, emotionally stable, and resilient to stress."
            else:
                level_description = f"Indicates a lower expression of typical {trait_name.lower()} characteristics."
        elif score <= 3.5:
            level = "Average"
            level_description = f"Indicates a moderate or balanced expression of typical {trait_name.lower()} characteristics."
        else:  # score > 3.5
            level = "High"
            if trait_name == "Neuroticism":
                level_description = "Indicates a tendency to experience emotional fluctuations, anxiety, or moodiness more frequently."
            else:
                level_description = f"Indicates a higher expression of typical {trait_name.lower()} characteristics."

    # Ensure trait_name exists in BFI10_TRAIT_DESCRIPTIONS to avoid KeyError
    general_description = BFI10_TRAIT_DESCRIPTIONS.get(trait_name, "General description not available.")

    return {
        "level": level,
        "level_specific_description": level_description,
        "general_trait_description": general_description
    }


# --- Custom Exception for HTMX Redirects ---
class HtmxRedirectException(HTTPException):
    def __init__(self, redirect_url: str):
        super().__init__(status_code=200, detail="HTMX redirect")
        self.headers = {"HX-Redirect": redirect_url}

@app.exception_handler(HtmxRedirectException)
async def htmx_redirect_exception_handler(request: Request, exc: HtmxRedirectException):
    return Response(content=exc.detail, status_code=exc.status_code, headers=exc.headers)


# --- Helper Functions ---
def load_quizzes_data() -> Dict[str, Any]:
    try:
        with open(QUIZZES_DATA_FILE, 'r') as f:
            data = json.load(f)
            logger.debug(f"Successfully loaded quiz definitions from {QUIZZES_DATA_FILE}")
            return data
    except FileNotFoundError:
        logger.error(f"{QUIZZES_DATA_FILE} not found. Returning empty quiz definitions.")
        return {"quizzes": []} # Only quizzes here, reports are from DB
    except json.JSONDecodeError as e:
        logger.error(f"Error decoding {QUIZZES_DATA_FILE}: {e}. Returning empty quiz definitions.")
        return {"quizzes": []}

# Note: save_quizzes_data is no longer needed for reports.
# If you modify quiz definitions via an admin panel later, you might need it for quizzes.

# --- Authentication Dependencies ---
async def get_current_user_from_cookie(request: Request) -> Optional[Dict[str, Any]]:
    user_email = request.cookies.get("user_session")
    if user_email and user_email in FAKE_USERS_DB:
        return FAKE_USERS_DB[user_email]
    return None

async def get_current_user_or_htmx_redirect(
    request: Request,
    current_user: Optional[Dict[str, Any]] = Depends(get_current_user_from_cookie)
) -> Dict[str, Any]:
    if not current_user:
        logger.warning(f"User not authenticated. Path: {request.url.path}. HX-Request: {'hx-request' in request.headers}")
        if "hx-request" in request.headers:
            raise HtmxRedirectException(redirect_url=app.url_path_for("auth_page_route"))
        else:
            raise HTTPException(status_code=303, detail="Not authenticated", headers={"Location": app.url_path_for("auth_page_route")})
    return current_user


# --- Middleware for common template variables ---
@app.middleware("http")
async def common_template_vars_middleware(request: Request, call_next):
    request.state.user = await get_current_user_from_cookie(request)
    request.state.current_year = datetime.now().year
    response = await call_next(request)
    return response


# --- Routes ---

@app.get("/", response_class=HTMLResponse, name="homepage")
async def homepage_route(request: Request):
    logger.info(f"Homepage requested by user: {request.state.user.get('email') if request.state.user else 'Anonymous'}")
    return templates.TemplateResponse("index.html", {
        "request": request,
        "title": "Welcome - mansematch"
    })

@app.post("/subscribe", name="subscribe")
async def subscribe_email_route(request: Request, email: str = Form(...)):
    logger.info(f"New email subscription: {email}")
    escaped_email = html.escape(email)
    return HTMLResponse(f"<p class='text-green-600 font-semibold'>Thank you for subscribing, {escaped_email}!</p>")


@app.get("/auth", response_class=HTMLResponse, name="auth_page_route")
async def auth_page_route(request: Request):
    if request.state.user:
        logger.info(f"User {request.state.user['email']} already authenticated, redirecting to dashboard.")
        return RedirectResponse(url=app.url_path_for("dashboard_page_route"), status_code=303)
    logger.info("Auth page requested.")
    return templates.TemplateResponse("auth.html", {
        "request": request,
        "title": "Sign In / Sign Up"
    })

@app.post("/login", name="login_route")
async def login_user_route(request: Request, email: str = Form(...), password: str = Form(...)):
    user = FAKE_USERS_DB.get(email)
    if not user or user["hashed_password"] != password:
        logger.warning(f"Login failed for email: {email}")
        return HTMLResponse("<p class='text-red-600'>Invalid email or password. Please try again.</p>", status_code=401)

    logger.info(f"User {email} logged in successfully.")
    response = HTMLResponse(content="<p>Login successful! Redirecting...</p>", status_code=200)
    response.set_cookie(
        key="user_session",
        value=user["email"],
        httponly=True,
        max_age=1800, # 30 minutes
        samesite="Lax",
        secure=request.url.scheme == "https",
        path="/"
    )
    redirect_url = app.url_path_for("dashboard_page_route")
    response.headers["HX-Redirect"] = redirect_url
    logger.debug(f"Login successful, HX-Redirecting to: {redirect_url}")
    return response

@app.post("/logout", name="logout_route")
async def logout_user_route(request: Request):
    user_email = request.state.user.get('email') if request.state.user else "Unknown"
    logger.info(f"User {user_email} logging out.")

    context = {
        "request": request,
        "title": "Welcome - mansematch",
        "user": None
    }
    html_content = templates.get_template("index.html").render(context)

    response = HTMLResponse(content=html_content)
    response.delete_cookie(
        "user_session",
        httponly=True,
        samesite="Lax",
        secure=request.url.scheme == "https",
        path="/"
    )
    response.headers["HX-Push-Url"] = app.url_path_for("homepage")
    return response


@app.get("/dashboard", response_class=HTMLResponse, name="dashboard_page_route")
async def dashboard_page_route(
    request: Request,
    current_user: Dict[str, Any] = Depends(get_current_user_or_htmx_redirect)
):
    logger.info(f"Dashboard requested by user: {current_user['email']}")
    quizzes_definitions = load_quizzes_data().get("quizzes", [])

    user_reports = []
    # MODIFIED HERE:
    if reports_collection is not None:
        try:
            # Sort by date_taken descending to show newest first
            report_cursor = reports_collection.find({"user_id": current_user["id"]}).sort("date_taken", -1)
            user_reports = list(report_cursor)
            logger.debug(f"User {current_user['email']} has {len(user_reports)} reports from MongoDB.")
        except Exception as e:
            logger.error(f"Error fetching reports from MongoDB for user {current_user['email']}: {e}")
            # Optionally, set a message for the user in the template
    else:
        logger.warning("Reports collection is not available (reports_collection is None). Cannot fetch reports.")


    return templates.TemplateResponse("dashboard.html", {
        "request": request,
        "title": "Dashboard - mansematch",
        "user": current_user,
        "quizzes": quizzes_definitions,
        "reports": user_reports # These are full report documents from Mongo
    })

# --- Quiz Routes ---
@app.get("/quiz/{quiz_id}", response_class=HTMLResponse, name="quiz_page_route")
async def quiz_page_route(
    request: Request,
    quiz_id: str,
    current_user: Dict[str, Any] = Depends(get_current_user_or_htmx_redirect)
):
    logger.info(f"Quiz page requested for quiz_id: {quiz_id} by user: {current_user['email']}")
    all_quiz_definitions = load_quizzes_data()
    quiz_detail = next((q for q in all_quiz_definitions.get("quizzes", []) if q["id"] == quiz_id), None)

    if not quiz_detail:
        logger.warning(f"Quiz ID: {quiz_id} not found when requested by user {current_user['email']}.")
        raise HTTPException(status_code=404, detail=f"Quiz ID: {quiz_id} not found.")

    if "questions" not in quiz_detail:
        logger.debug(f"Quiz ID: {quiz_id} has no 'questions' key. Defaulting to empty list.")
        quiz_detail["questions"] = []

    logger.debug(f"Quiz detail for quiz_id {quiz_id} being sent to template (summary): title='{quiz_detail.get('title')}', num_questions={len(quiz_detail.get('questions',[]))}")

    return templates.TemplateResponse("quiz_page.html", {
        "request": request,
        "title": f"Quiz: {html.escape(quiz_detail.get('title', 'Untitled Quiz'))}",
        "user": current_user,
        "quiz": quiz_detail
    })

def calculate_bfi10_scores(questions: List[Dict[str, Any]], user_answers_dict: Dict[str, int]) -> Dict[str, float]:
    scores = {"E": [], "A": [], "C": [], "N": [], "O": []}
    trait_map = {
        "E": "Extraversion",
        "A": "Agreeableness",
        "C": "Conscientiousness",
        "N": "Neuroticism",
        "O": "Openness"
    }

    for question in questions:
        q_id = question.get("id")
        key = question.get("key")
        user_answer = user_answers_dict.get(q_id)

        if user_answer is None or key is None:
            logger.warning(f"Missing answer or key for BFI-10 question ID: {q_id}. User answers: {user_answers_dict}")
            continue

        try:
            answer_val = int(user_answer)
        except ValueError:
            logger.error(f"Invalid non-integer answer for BFI-10 question {q_id}: {user_answer}")
            continue

        trait_code = key[0]
        is_reversed = key.endswith("_R")

        if trait_code not in scores:
            logger.warning(f"Unknown trait '{trait_code}' in key '{key}' for question {q_id}")
            continue

        actual_score = (6 - answer_val) if is_reversed else answer_val
        scores[trait_code].append(actual_score)

    final_scores = {}
    for trait_code, items_scores in scores.items():
        trait_name = trait_map.get(trait_code)
        if not trait_name:
            logger.warning(f"Trait code {trait_code} not found in trait_map.")
            continue
        if items_scores:
            avg_score = sum(items_scores) / len(items_scores)
            final_scores[trait_name] = round(avg_score, 2)
        else:
            final_scores[trait_name] = None
            logger.warning(f"No scores recorded for BFI-10 trait: {trait_name}")
    return final_scores

@app.post("/quiz/{quiz_id}/submit", name="submit_quiz_route")
async def submit_quiz_route(
    request: Request,
    quiz_id: str,
    answers: str = Form(...),
    current_user: Dict[str, Any] = Depends(get_current_user_or_htmx_redirect)
):
    logger.info(f"Quiz submission for quiz_id: {quiz_id} by user: {current_user['email']}")
    logger.debug(f"Raw answers JSON string from form: {answers}")

    # MODIFIED HERE:
    if reports_collection is None:
        logger.error("Reports collection is not available (reports_collection is None). Cannot save quiz submission.")
        raise HTTPException(status_code=503, detail="Database service unavailable. Cannot save quiz results.")


    all_quiz_definitions = load_quizzes_data()
    quiz_detail = next((q for q in all_quiz_definitions.get("quizzes", []) if q["id"] == quiz_id), None)

    if not quiz_detail:
        logger.error(f"Quiz ID: {quiz_id} not found during submission by user {current_user['email']}.")
        raise HTTPException(status_code=404, detail=f"Quiz ID: {quiz_id} not found.")

    try:
        user_answers_dict = json.loads(answers)
        logger.debug(f"Parsed user answers: {user_answers_dict}")
    except json.JSONDecodeError as e:
        logger.error(f"Invalid answers JSON format from user {current_user['email']} for quiz {quiz_id}: {e}")
        raise HTTPException(status_code=400, detail="Invalid answers format.")

    quiz_questions = quiz_detail.get("questions", [])
    report_score: Union[str, Dict[str, Optional[float]]]
    report_type = "standard"

    if quiz_id == "bfi-10":
        report_type = "bfi-10"
        answered_question_ids = user_answers_dict.keys()
        expected_question_ids = {str(q.get("id")) for q in quiz_questions}
        if not expected_question_ids.issubset(answered_question_ids) or \
           any(user_answers_dict.get(qid) is None for qid in expected_question_ids):
            logger.warning(f"BFI-10 submission by {current_user['email']} incomplete. Expected {len(quiz_questions)} answers for IDs {expected_question_ids}, got answers for {answered_question_ids} with values {user_answers_dict}")
            pass

        bfi_scores = calculate_bfi10_scores(quiz_questions, user_answers_dict)
        report_score = bfi_scores
        logger.info(f"User {current_user['email']} BFI-10 scores: {bfi_scores}")
    else:
        correct_answers_count = 0
        total_questions = len(quiz_questions)
        if total_questions > 0:
            for question in quiz_questions:
                question_id_str = str(question.get("id"))
                user_answer = user_answers_dict.get(question_id_str)
                correct_answer = question.get("answer")
                if user_answer is not None and str(user_answer) == str(correct_answer):
                    correct_answers_count += 1
            score_percentage = (correct_answers_count / total_questions) * 100 if total_questions > 0 else 0
        else:
            score_percentage = 0
        report_score = f"{score_percentage:.0f}%"
        logger.info(f"User {current_user['email']} scored {report_score} on quiz {quiz_id}.")

    new_report_id = f"rep_{uuid4().hex[:10]}"
    new_report_doc = {
        "id": new_report_id,
        "user_id": current_user["id"],
        "quiz_id": quiz_id,
        "quiz_title": quiz_detail.get('title', 'Untitled Quiz'),
        "quiz_description": quiz_detail.get('description', 'No description available.'),
        "score": report_score,
        "date_taken": datetime.utcnow(),
        "answers_submitted": user_answers_dict,
        "report_type": report_type
    }

    try:
        # reports_collection is already confirmed to be not None
        insert_result = reports_collection.insert_one(new_report_doc)
        logger.info(f"New report {new_report_id} (MongoDB _id: {insert_result.inserted_id}) saved for user {current_user['email']}.")
    except Exception as e:
        logger.error(f"Error saving report {new_report_id} to MongoDB: {e}")
        raise HTTPException(status_code=500, detail="Failed to save quiz results due to a database error.")

    report_page_url = app.url_path_for("report_page_route", report_id=new_report_id)
    logger.info(f"Redirecting user {current_user['email']} to report page: {report_page_url}")
    return RedirectResponse(url=report_page_url, status_code=303)


@app.get("/report/{report_id}", name="report_page_route")
async def report_page_route(
    request: Request,
    report_id: str,
    current_user: Dict[str, Any] = Depends(get_current_user_or_htmx_redirect)
):
    logger.info(f"User {current_user['email']} requesting report page for report_id: {report_id}")

    # MODIFIED HERE:
    if reports_collection is None:
        logger.error(f"Reports collection unavailable (reports_collection is None) when trying to view report {report_id}")
        raise HTTPException(status_code=503, detail="Database service unavailable. Cannot load report.")

    try:
        # reports_collection is already confirmed to be not None
        report_detail = reports_collection.find_one({"id": report_id, "user_id": current_user["id"]})
    except Exception as e:
        logger.error(f"Error fetching report {report_id} from MongoDB: {e}")
        raise HTTPException(status_code=500, detail="Failed to load report due to a database error.")

    if not report_detail:
        logger.warning(f"Report ID: {report_id} not found or access denied for user {current_user['email']}.")
        raise HTTPException(status_code=404, detail=f"Report ID: {report_id} not found or access denied.")


    context = {
        "request": request,
        "title": f"Report: {html.escape(report_detail.get('quiz_title', 'Quiz Report'))}",
        "user": current_user,
        "report": report_detail
    }

    if report_detail.get("report_type") == "bfi-10" and isinstance(report_detail.get("score"), dict):
        trait_scores = report_detail["score"]
        radar_labels = ["Extraversion", "Agreeableness", "Conscientiousness", "Neuroticism", "Openness"]
        radar_data = [trait_scores.get(label, 0) for label in radar_labels]

        context["radar_chart_labels"] = radar_labels
        context["radar_chart_data"] = radar_data

        table_data = []
        for trait in radar_labels:
            score = trait_scores.get(trait)
            interpretation = get_bfi10_interpretation_details(trait, score)
            table_data.append({
                "trait": trait,
                "score": score if score is not None else "N/A",
                "interpretation_level": interpretation["level"],
                "interpretation_description": interpretation["level_specific_description"],
                "general_trait_description": interpretation["general_trait_description"]
            })
        context["bfi_table_data"] = table_data
        logger.debug(f"Prepared BFI-10 report data for {report_id}: Scores {trait_scores}, Radar Data {radar_data}")
        return templates.TemplateResponse("big_five_report.html", context)
    else:
        logger.debug(f"Displaying generic report for {report_id}")
        return templates.TemplateResponse("report_page.html", context)


# --- Main Execution ---
if __name__ == "__main__":
    import uvicorn
    # MODIFIED HERE:
    if reports_collection is None: # Check if None after connection attempt
        logger.critical("Application will start WITH MongoDB features DISABLED due to connection/configuration issues (reports_collection is None).")

    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        reload_dirs=[str(BASE_DIR)],
        log_level="info"
    )
</file>

<file path="app/quizzes_data.json">
{
  "quizzes": [
    {
      "id": "bfi-10",
      "title": "Big Five Personality Quiz",
      "description": "A short 10-item measure of the Big Five personality dimensions.",
      "questions": [
        {
          "id": "bfi_1",
          "text": "...is reserved.",
          "type": "multiple-choice",
          "key": "E_R",
          "options_map": [
            { "text": "Disagree Strongly ", "value": 1 },
            { "text": "Disagree A Little ", "value": 2 },
            { "text": "Neither Agree Nor Disagree ", "value": 3 },
            { "text": "Agree A Little ", "value": 4 },
            { "text": "Agree Strongly ", "value": 5 }
          ]
        },
        {
          "id": "bfi_2",
          "text": "...is generally trusting.",
          "type": "multiple-choice",
          "key": "A",
          "options_map": [
            { "text": "Disagree Strongly ", "value": 1 },
            { "text": "Disagree A Little ", "value": 2 },
            { "text": "Neither Agree Nor Disagree ", "value": 3 },
            { "text": "Agree A Little ", "value": 4 },
            { "text": "Agree Strongly ", "value": 5 }
          ]
        },
        {
          "id": "bfi_3",
          "text": "...tends to be lazy.",
          "type": "multiple-choice",
          "key": "C_R",
          "options_map": [
            { "text": "Disagree Strongly ", "value": 1 },
            { "text": "Disagree A Little ", "value": 2 },
            { "text": "Neither Agree Nor Disagree ", "value": 3 },
            { "text": "Agree A Little ", "value": 4 },
            { "text": "Agree Strongly ", "value": 5 }
          ]
        },
        {
          "id": "bfi_4",
          "text": "...is relaxed, handles stress well.",
          "type": "multiple-choice",
          "key": "N_R",
          "options_map": [
            { "text": "Disagree Strongly ", "value": 1 },
            { "text": "Disagree A Little ", "value": 2 },
            { "text": "Neither Agree Nor Disagree ", "value": 3 },
            { "text": "Agree A Little ", "value": 4 },
            { "text": "Agree Strongly ", "value": 5 }
          ]
        },
        {
          "id": "bfi_5",
          "text": "...has few artistic interests.",
          "type": "multiple-choice",
          "key": "O_R",
          "options_map": [
            { "text": "Disagree Strongly ", "value": 1 },
            { "text": "Disagree A Little ", "value": 2 },
            { "text": "Neither Agree Nor Disagree ", "value": 3 },
            { "text": "Agree A Little ", "value": 4 },
            { "text": "Agree Strongly ", "value": 5 }
          ]
        },
        {
          "id": "bfi_6",
          "text": "...is outgoing, sociable.",
          "type": "multiple-choice",
          "key": "E",
          "options_map": [
            { "text": "Disagree Strongly ", "value": 1 },
            { "text": "Disagree A Little ", "value": 2 },
            { "text": "Neither Agree Nor Disagree ", "value": 3 },
            { "text": "Agree A Little ", "value": 4 },
            { "text": "Agree Strongly ", "value": 5 }
          ]
        },
        {
          "id": "bfi_7",
          "text": "...tends to find fault with others.",
          "type": "multiple-choice",
          "key": "A_R",
          "options_map": [
            { "text": "Disagree Strongly ", "value": 1 },
            { "text": "Disagree A Little ", "value": 2 },
            { "text": "Neither Agree Nor Disagree ", "value": 3 },
            { "text": "Agree A Little ", "value": 4 },
            { "text": "Agree Strongly ", "value": 5 }
          ]
        },
        {
          "id": "bfi_8",
          "text": "...does a thorough job.",
          "type": "multiple-choice",
          "key": "C",
          "options_map": [
            { "text": "Disagree Strongly ", "value": 1 },
            { "text": "Disagree A Little ", "value": 2 },
            { "text": "Neither Agree Nor Disagree ", "value": 3 },
            { "text": "Agree A Little ", "value": 4 },
            { "text": "Agree Strongly ", "value": 5 }
          ]
        },
        {
          "id": "bfi_9",
          "text": "...gets nervous easily.",
          "type": "multiple-choice",
          "key": "N",
          "options_map": [
            { "text": "Disagree Strongly ", "value": 1 },
            { "text": "Disagree A Little ", "value": 2 },
            { "text": "Neither Agree Nor Disagree ", "value": 3 },
            { "text": "Agree A Little ", "value": 4 },
            { "text": "Agree Strongly ", "value": 5 }
          ]
        },
        {
          "id": "bfi_10",
          "text": "...has an active imagination.",
          "type": "multiple-choice",
          "key": "O",
          "options_map": [
            { "text": "Disagree Strongly ", "value": 1 },
            { "text": "Disagree A Little ", "value": 2 },
            { "text": "Neither Agree Nor Disagree ", "value": 3 },
            { "text": "Agree A Little ", "value": 4 },
            { "text": "Agree Strongly ", "value": 5 }
          ]
        }
      ]
    },
    {
      "id": "q1",
      "title": "Basic Python Quiz",
      "description": "Test your fundamental Python knowledge.",
      "questions": [
        {
          "id": "q1_1",
          "text": "What is the output of print(2**3)?",
          "type": "multiple-choice",
          "options": ["5", "6", "8", "9"],
          "answer": "8"
        },
        {
          "id": "q1_2",
          "text": "Which keyword is used to define a function in Python?",
          "type": "multiple-choice",
          "options": ["func", "def", "function", "define"],
          "answer": "def"
        },
        {
          "id": "q1_3",
          "text": "What is the correct file extension for Python files? (e.g. '.py')",
          "type": "multiple-choice",
          "options": [".pyth", ".pt", ".pi", ".py"],
          "answer": ".py"
        }
      ]
    }
  ],
  "reports": [
    {
      "id": "r1",
      "user_id": "user1",
      "quiz_id": "q1",
      "quiz_title": "Basic Python Quiz",
      "score": "67%",
      "date_taken": "2023-10-25",
      "answers_submitted": {
        "q1_1": "8",
        "q1_2": "def",
        "q1_3": ".pyth"
      }
    }
  ]
}
</file>

<file path="docker-compose.yml">
# docker-compose.yml
version: "3.8"

services:
  web:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app # Mount app directory for live reload
    env_file: # <--- ADD THIS SECTION
      - ./.env
    environment:
      - PYTHONUNBUFFERED=1 # Ensures print statements and logs are sent straight to terminal
      # For development, you might want to explicitly set the host if running behind a proxy
      # or if having issues with Uvicorn's auto-detection.
      # - APP_HOST=0.0.0.0
</file>

<file path="Dockerfile">
# Dockerfile
FROM python:3.9-slim

WORKDIR /app

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

COPY requirements.txt requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

COPY ./app /app/

EXPOSE 8000

# Run Uvicorn with reload for development.
# --reload-dir watches the specified directory (and subdirectories) for changes.
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--reload-dir", "/app"]
</file>

<file path="requirements.txt">
# requirements.txt
fastapi
uvicorn[standard]
jinja2
python-multipart
pymongo
python-dotenv
</file>

</files>
